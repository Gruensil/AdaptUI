/**
 * generated by Xtext 2.12.0
 */
package org.xtext.contextml.contextML.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.contextml.contextML.ActionCategory;
import org.xtext.contextml.contextML.Actions;
import org.xtext.contextml.contextML.AdaptCssClassOperation;
import org.xtext.contextml.contextML.AdaptationModel;
import org.xtext.contextml.contextML.AdaptationRule;
import org.xtext.contextml.contextML.AddNavLinkOperation;
import org.xtext.contextml.contextML.AddViewComponentButtonOperation;
import org.xtext.contextml.contextML.AddViewComponentOperation;
import org.xtext.contextml.contextML.BoolValue;
import org.xtext.contextml.contextML.BooleanCondition;
import org.xtext.contextml.contextML.ChangeColorSchemeOperation;
import org.xtext.contextml.contextML.ChangeFontOperation;
import org.xtext.contextml.contextML.ChangeFontSizeOperation;
import org.xtext.contextml.contextML.ChangeTableCssClassOperation;
import org.xtext.contextml.contextML.ClearNavOperation;
import org.xtext.contextml.contextML.ConditionalAndExpression;
import org.xtext.contextml.contextML.ConditionalOrExpression;
import org.xtext.contextml.contextML.ConditionalPrimary;
import org.xtext.contextml.contextML.ContextMLPackage;
import org.xtext.contextml.contextML.ContextModel;
import org.xtext.contextml.contextML.DefType;
import org.xtext.contextml.contextML.DefTypes;
import org.xtext.contextml.contextML.DeleteNavLinkOperation;
import org.xtext.contextml.contextML.DeleteViewComponentButtonOperation;
import org.xtext.contextml.contextML.DeleteViewComponentOperation;
import org.xtext.contextml.contextML.DisplayPropertyValue;
import org.xtext.contextml.contextML.EditFactOperation;
import org.xtext.contextml.contextML.Entity;
import org.xtext.contextml.contextML.Enums;
import org.xtext.contextml.contextML.Fact;
import org.xtext.contextml.contextML.FactName;
import org.xtext.contextml.contextML.FactProperty;
import org.xtext.contextml.contextML.Function;
import org.xtext.contextml.contextML.FunctionList;
import org.xtext.contextml.contextML.IntValue;
import org.xtext.contextml.contextML.Model;
import org.xtext.contextml.contextML.NumberCondition;
import org.xtext.contextml.contextML.ParentOperation;
import org.xtext.contextml.contextML.Property;
import org.xtext.contextml.contextML.Provider;
import org.xtext.contextml.contextML.RedirectNavLinkOperation;
import org.xtext.contextml.contextML.Service;
import org.xtext.contextml.contextML.ServiceFunctionCallOperation;
import org.xtext.contextml.contextML.ServiceList;
import org.xtext.contextml.contextML.SetDisplayPropertyOperation;
import org.xtext.contextml.contextML.StringCondition;
import org.xtext.contextml.contextML.StringValue;
import org.xtext.contextml.contextML.TYPE;
import org.xtext.contextml.contextML.UpdateType;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.contextml.contextML.ContextMLPackage
 * @generated
 */
public class ContextMLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ContextMLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextMLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ContextMLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextMLSwitch<Adapter> modelSwitch =
    new ContextMLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseContextModel(ContextModel object)
      {
        return createContextModelAdapter();
      }
      @Override
      public Adapter caseAdaptationModel(AdaptationModel object)
      {
        return createAdaptationModelAdapter();
      }
      @Override
      public Adapter caseServiceList(ServiceList object)
      {
        return createServiceListAdapter();
      }
      @Override
      public Adapter caseService(Service object)
      {
        return createServiceAdapter();
      }
      @Override
      public Adapter caseFunctionList(FunctionList object)
      {
        return createFunctionListAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseAdaptationRule(AdaptationRule object)
      {
        return createAdaptationRuleAdapter();
      }
      @Override
      public Adapter caseConditionalOrExpression(ConditionalOrExpression object)
      {
        return createConditionalOrExpressionAdapter();
      }
      @Override
      public Adapter caseConditionalAndExpression(ConditionalAndExpression object)
      {
        return createConditionalAndExpressionAdapter();
      }
      @Override
      public Adapter caseConditionalPrimary(ConditionalPrimary object)
      {
        return createConditionalPrimaryAdapter();
      }
      @Override
      public Adapter caseBooleanCondition(BooleanCondition object)
      {
        return createBooleanConditionAdapter();
      }
      @Override
      public Adapter caseNumberCondition(NumberCondition object)
      {
        return createNumberConditionAdapter();
      }
      @Override
      public Adapter caseStringCondition(StringCondition object)
      {
        return createStringConditionAdapter();
      }
      @Override
      public Adapter caseFact(Fact object)
      {
        return createFactAdapter();
      }
      @Override
      public Adapter caseFactName(FactName object)
      {
        return createFactNameAdapter();
      }
      @Override
      public Adapter caseFactProperty(FactProperty object)
      {
        return createFactPropertyAdapter();
      }
      @Override
      public Adapter caseActions(Actions object)
      {
        return createActionsAdapter();
      }
      @Override
      public Adapter caseActionCategory(ActionCategory object)
      {
        return createActionCategoryAdapter();
      }
      @Override
      public Adapter caseParentOperation(ParentOperation object)
      {
        return createParentOperationAdapter();
      }
      @Override
      public Adapter caseServiceFunctionCallOperation(ServiceFunctionCallOperation object)
      {
        return createServiceFunctionCallOperationAdapter();
      }
      @Override
      public Adapter caseEditFactOperation(EditFactOperation object)
      {
        return createEditFactOperationAdapter();
      }
      @Override
      public Adapter caseSetDisplayPropertyOperation(SetDisplayPropertyOperation object)
      {
        return createSetDisplayPropertyOperationAdapter();
      }
      @Override
      public Adapter caseDisplayPropertyValue(DisplayPropertyValue object)
      {
        return createDisplayPropertyValueAdapter();
      }
      @Override
      public Adapter caseIntValue(IntValue object)
      {
        return createIntValueAdapter();
      }
      @Override
      public Adapter caseStringValue(StringValue object)
      {
        return createStringValueAdapter();
      }
      @Override
      public Adapter caseBoolValue(BoolValue object)
      {
        return createBoolValueAdapter();
      }
      @Override
      public Adapter caseAddViewComponentOperation(AddViewComponentOperation object)
      {
        return createAddViewComponentOperationAdapter();
      }
      @Override
      public Adapter caseDeleteViewComponentOperation(DeleteViewComponentOperation object)
      {
        return createDeleteViewComponentOperationAdapter();
      }
      @Override
      public Adapter caseAddViewComponentButtonOperation(AddViewComponentButtonOperation object)
      {
        return createAddViewComponentButtonOperationAdapter();
      }
      @Override
      public Adapter caseDeleteViewComponentButtonOperation(DeleteViewComponentButtonOperation object)
      {
        return createDeleteViewComponentButtonOperationAdapter();
      }
      @Override
      public Adapter caseAddNavLinkOperation(AddNavLinkOperation object)
      {
        return createAddNavLinkOperationAdapter();
      }
      @Override
      public Adapter caseDeleteNavLinkOperation(DeleteNavLinkOperation object)
      {
        return createDeleteNavLinkOperationAdapter();
      }
      @Override
      public Adapter caseRedirectNavLinkOperation(RedirectNavLinkOperation object)
      {
        return createRedirectNavLinkOperationAdapter();
      }
      @Override
      public Adapter caseClearNavOperation(ClearNavOperation object)
      {
        return createClearNavOperationAdapter();
      }
      @Override
      public Adapter caseChangeFontSizeOperation(ChangeFontSizeOperation object)
      {
        return createChangeFontSizeOperationAdapter();
      }
      @Override
      public Adapter caseChangeColorSchemeOperation(ChangeColorSchemeOperation object)
      {
        return createChangeColorSchemeOperationAdapter();
      }
      @Override
      public Adapter caseChangeFontOperation(ChangeFontOperation object)
      {
        return createChangeFontOperationAdapter();
      }
      @Override
      public Adapter caseChangeTableCssClassOperation(ChangeTableCssClassOperation object)
      {
        return createChangeTableCssClassOperationAdapter();
      }
      @Override
      public Adapter caseAdaptCssClassOperation(AdaptCssClassOperation object)
      {
        return createAdaptCssClassOperationAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseProvider(Provider object)
      {
        return createProviderAdapter();
      }
      @Override
      public Adapter caseDefTypes(DefTypes object)
      {
        return createDefTypesAdapter();
      }
      @Override
      public Adapter caseDefType(DefType object)
      {
        return createDefTypeAdapter();
      }
      @Override
      public Adapter caseEnums(Enums object)
      {
        return createEnumsAdapter();
      }
      @Override
      public Adapter caseEnum(org.xtext.contextml.contextML.Enum object)
      {
        return createEnumAdapter();
      }
      @Override
      public Adapter caseTYPE(TYPE object)
      {
        return createTYPEAdapter();
      }
      @Override
      public Adapter caseUpdateType(UpdateType object)
      {
        return createUpdateTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ContextModel <em>Context Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ContextModel
   * @generated
   */
  public Adapter createContextModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AdaptationModel <em>Adaptation Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AdaptationModel
   * @generated
   */
  public Adapter createAdaptationModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ServiceList <em>Service List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ServiceList
   * @generated
   */
  public Adapter createServiceListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Service <em>Service</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Service
   * @generated
   */
  public Adapter createServiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.FunctionList <em>Function List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.FunctionList
   * @generated
   */
  public Adapter createFunctionListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AdaptationRule <em>Adaptation Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AdaptationRule
   * @generated
   */
  public Adapter createAdaptationRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ConditionalOrExpression <em>Conditional Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ConditionalOrExpression
   * @generated
   */
  public Adapter createConditionalOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ConditionalAndExpression <em>Conditional And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ConditionalAndExpression
   * @generated
   */
  public Adapter createConditionalAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ConditionalPrimary <em>Conditional Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ConditionalPrimary
   * @generated
   */
  public Adapter createConditionalPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.BooleanCondition <em>Boolean Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.BooleanCondition
   * @generated
   */
  public Adapter createBooleanConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.NumberCondition <em>Number Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.NumberCondition
   * @generated
   */
  public Adapter createNumberConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.StringCondition <em>String Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.StringCondition
   * @generated
   */
  public Adapter createStringConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Fact <em>Fact</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Fact
   * @generated
   */
  public Adapter createFactAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.FactName <em>Fact Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.FactName
   * @generated
   */
  public Adapter createFactNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.FactProperty <em>Fact Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.FactProperty
   * @generated
   */
  public Adapter createFactPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Actions <em>Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Actions
   * @generated
   */
  public Adapter createActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ActionCategory <em>Action Category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ActionCategory
   * @generated
   */
  public Adapter createActionCategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ParentOperation <em>Parent Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ParentOperation
   * @generated
   */
  public Adapter createParentOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ServiceFunctionCallOperation <em>Service Function Call Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ServiceFunctionCallOperation
   * @generated
   */
  public Adapter createServiceFunctionCallOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.EditFactOperation <em>Edit Fact Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.EditFactOperation
   * @generated
   */
  public Adapter createEditFactOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.SetDisplayPropertyOperation <em>Set Display Property Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.SetDisplayPropertyOperation
   * @generated
   */
  public Adapter createSetDisplayPropertyOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DisplayPropertyValue <em>Display Property Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DisplayPropertyValue
   * @generated
   */
  public Adapter createDisplayPropertyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.IntValue <em>Int Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.IntValue
   * @generated
   */
  public Adapter createIntValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.StringValue <em>String Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.StringValue
   * @generated
   */
  public Adapter createStringValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.BoolValue <em>Bool Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.BoolValue
   * @generated
   */
  public Adapter createBoolValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AddViewComponentOperation <em>Add View Component Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AddViewComponentOperation
   * @generated
   */
  public Adapter createAddViewComponentOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DeleteViewComponentOperation <em>Delete View Component Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DeleteViewComponentOperation
   * @generated
   */
  public Adapter createDeleteViewComponentOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AddViewComponentButtonOperation <em>Add View Component Button Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AddViewComponentButtonOperation
   * @generated
   */
  public Adapter createAddViewComponentButtonOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DeleteViewComponentButtonOperation <em>Delete View Component Button Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DeleteViewComponentButtonOperation
   * @generated
   */
  public Adapter createDeleteViewComponentButtonOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AddNavLinkOperation <em>Add Nav Link Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AddNavLinkOperation
   * @generated
   */
  public Adapter createAddNavLinkOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DeleteNavLinkOperation <em>Delete Nav Link Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DeleteNavLinkOperation
   * @generated
   */
  public Adapter createDeleteNavLinkOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.RedirectNavLinkOperation <em>Redirect Nav Link Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.RedirectNavLinkOperation
   * @generated
   */
  public Adapter createRedirectNavLinkOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ClearNavOperation <em>Clear Nav Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ClearNavOperation
   * @generated
   */
  public Adapter createClearNavOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ChangeFontSizeOperation <em>Change Font Size Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ChangeFontSizeOperation
   * @generated
   */
  public Adapter createChangeFontSizeOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ChangeColorSchemeOperation <em>Change Color Scheme Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ChangeColorSchemeOperation
   * @generated
   */
  public Adapter createChangeColorSchemeOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ChangeFontOperation <em>Change Font Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ChangeFontOperation
   * @generated
   */
  public Adapter createChangeFontOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.ChangeTableCssClassOperation <em>Change Table Css Class Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.ChangeTableCssClassOperation
   * @generated
   */
  public Adapter createChangeTableCssClassOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.AdaptCssClassOperation <em>Adapt Css Class Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.AdaptCssClassOperation
   * @generated
   */
  public Adapter createAdaptCssClassOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Provider <em>Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Provider
   * @generated
   */
  public Adapter createProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DefTypes <em>Def Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DefTypes
   * @generated
   */
  public Adapter createDefTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.DefType <em>Def Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.DefType
   * @generated
   */
  public Adapter createDefTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Enums <em>Enums</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Enums
   * @generated
   */
  public Adapter createEnumsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.Enum <em>Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.Enum
   * @generated
   */
  public Adapter createEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.TYPE <em>TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.TYPE
   * @generated
   */
  public Adapter createTYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.contextml.contextML.UpdateType <em>Update Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.contextml.contextML.UpdateType
   * @generated
   */
  public Adapter createUpdateTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ContextMLAdapterFactory
