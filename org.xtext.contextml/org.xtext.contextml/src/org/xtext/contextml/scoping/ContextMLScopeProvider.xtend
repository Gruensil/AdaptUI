
/*
 * generated by Xtext 2.12.0
 */
package org.xtext.contextml.scoping

import org.xtext.contextml.contextML.ContextMLPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.contextml.contextML.Provider
import org.xtext.contextml.contextML.FactName
import org.xtext.contextml.contextML.Entity
import org.xtext.contextml.contextML.Property
import org.xtext.contextml.contextML.DefType

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ContextMLScopeProvider extends AbstractContextMLScopeProvider {
	override getScope(EObject context, EReference reference) {
	    // We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof Provider
	            && reference == ContextMLPackage$Literals::PROPERTY__PROVIDER) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Provider)
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates)
	    }else if(context instanceof DefType
	            && reference == ContextMLPackage$Literals::TYPE__DEFTYPE){
	    	val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, DefType)
	        return Scopes.scopeFor(candidates)
	    }else if(context instanceof FactName
	            && reference == ContextMLPackage$Literals::FACT__FACT_NAME){
	    	val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, FactName)
	        return Scopes.scopeFor(candidates)
	    }else if(context instanceof Entity
	            && reference == ContextMLPackage$Literals::FACT__ENTITY){
	    	val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
	        return Scopes.scopeFor(candidates)
	    }
//	    else if(context instanceof Property
//	            && reference == ContextMLPackage$Literals::FACT__PROPERTY_NAME){
//	    	val rootElement = EcoreUtil2.getRootContainer(context)
//	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Property)
//	        return Scopes.scopeFor(candidates)
//	    }
	    return super.getScope(context, reference);
	}
}
