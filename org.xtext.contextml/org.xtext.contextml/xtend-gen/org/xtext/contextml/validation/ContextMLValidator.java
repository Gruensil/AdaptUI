/**
 * generated by Xtext 2.12.0
 */
package org.xtext.contextml.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.xtext.contextml.contextML.ContextMLPackage;
import org.xtext.contextml.contextML.ContextModel;
import org.xtext.contextml.contextML.Entity;
import org.xtext.contextml.contextML.Property;
import org.xtext.contextml.contextML.Provider;
import org.xtext.contextml.validation.AbstractContextMLValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ContextMLValidator extends AbstractContextMLValidator {
  @Check
  public void isProviderNotEmpty(final Provider provider) {
    String _name = provider.getName();
    boolean _equals = Objects.equal(_name, "");
    if (_equals) {
      this.error("Provider Name shall not be empty", ContextMLPackage.Literals.PROVIDER__NAME);
    }
  }
  
  @Check
  public void isEntityUnique(final ContextModel contextModel) {
    int i = 0;
    EList<Entity> _entity = contextModel.getEntity();
    for (final Entity firstEnt : _entity) {
      {
        int _i = i;
        i = (_i + 1);
        int j = 0;
        EList<Entity> _entity_1 = contextModel.getEntity();
        for (final Entity secEnt : _entity_1) {
          {
            int _j = j;
            j = (_j + 1);
            if ((Objects.equal(firstEnt.getName(), secEnt.getName()) && (i != j))) {
              this.error("Entity names must be unique in a Context Model.", ContextMLPackage.Literals.CONTEXT_MODEL__ENTITY);
            }
          }
        }
      }
    }
  }
  
  @Check
  public void isPropertyUnique(final Entity entity) {
    int i = 0;
    EList<Property> _property = entity.getProperty();
    for (final Property firstProp : _property) {
      {
        int _i = i;
        i = (_i + 1);
        int j = 0;
        EList<Property> _property_1 = entity.getProperty();
        for (final Property secProp : _property_1) {
          {
            int _j = j;
            j = (_j + 1);
            if ((Objects.equal(firstProp.getName(), secProp.getName()) && (i != j))) {
              this.error("Property names must be unique in an Entity.", ContextMLPackage.Literals.ENTITY__PROPERTY);
            }
          }
        }
      }
    }
  }
  
  @Check
  public void isProviderUnique(final ContextModel contextModel) {
    int i = 0;
    EList<Provider> _provider = contextModel.getProvider();
    for (final Provider firstProv : _provider) {
      {
        int _i = i;
        i = (_i + 1);
        int j = 0;
        EList<Provider> _provider_1 = contextModel.getProvider();
        for (final Provider secProv : _provider_1) {
          {
            int _j = j;
            j = (_j + 1);
            if ((Objects.equal(firstProv.getName(), secProv.getName()) && (i != j))) {
              this.error("Provider names must be unique in a Context Model.", ContextMLPackage.Literals.CONTEXT_MODEL__PROVIDER);
            }
          }
        }
      }
    }
  }
}
