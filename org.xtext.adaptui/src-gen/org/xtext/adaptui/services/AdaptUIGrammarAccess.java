/*
 * generated by Xtext 2.12.0
 */
package org.xtext.adaptui.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AdaptUIGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextModelContextModelParserRuleCall_0_0 = (RuleCall)cContextModelAssignment_0.eContents().get(0);
		private final Assignment cAdaptationModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdaptationModelAdaptationModelParserRuleCall_1_0 = (RuleCall)cAdaptationModelAssignment_1.eContents().get(0);
		
		//Model:
		//	contextModel=ContextModel
		//	adaptationModel=AdaptationModel;
		@Override public ParserRule getRule() { return rule; }
		
		//contextModel=ContextModel adaptationModel=AdaptationModel
		public Group getGroup() { return cGroup; }
		
		//contextModel=ContextModel
		public Assignment getContextModelAssignment_0() { return cContextModelAssignment_0; }
		
		//ContextModel
		public RuleCall getContextModelContextModelParserRuleCall_0_0() { return cContextModelContextModelParserRuleCall_0_0; }
		
		//adaptationModel=AdaptationModel
		public Assignment getAdaptationModelAssignment_1() { return cAdaptationModelAssignment_1; }
		
		//AdaptationModel
		public RuleCall getAdaptationModelAdaptationModelParserRuleCall_1_0() { return cAdaptationModelAdaptationModelParserRuleCall_1_0; }
	}
	public class ContextModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ContextModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityEntityParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cProvidersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cProviderAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cProviderProviderParserRuleCall_2_1_0_0 = (RuleCall)cProviderAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesDefTypesParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContextModel:
		//	'ContextModel{'
		//	entity+=Entity+ ('Providers{' (provider+=Provider ';')*
		//	'};')? ('DefTypes{'
		//	types=DefTypes
		//	'};')?
		//	'};';
		@Override public ParserRule getRule() { return rule; }
		
		//'ContextModel{' entity+=Entity+ ('Providers{' (provider+=Provider ';')* '};')? ('DefTypes{' types=DefTypes '};')? '};'
		public Group getGroup() { return cGroup; }
		
		//'ContextModel{'
		public Keyword getContextModelKeyword_0() { return cContextModelKeyword_0; }
		
		//entity+=Entity+
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//Entity
		public RuleCall getEntityEntityParserRuleCall_1_0() { return cEntityEntityParserRuleCall_1_0; }
		
		//('Providers{' (provider+=Provider ';')* '};')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Providers{'
		public Keyword getProvidersKeyword_2_0() { return cProvidersKeyword_2_0; }
		
		//(provider+=Provider ';')*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//provider+=Provider
		public Assignment getProviderAssignment_2_1_0() { return cProviderAssignment_2_1_0; }
		
		//Provider
		public RuleCall getProviderProviderParserRuleCall_2_1_0_0() { return cProviderProviderParserRuleCall_2_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_2_2() { return cRightCurlyBracketSemicolonKeyword_2_2; }
		
		//('DefTypes{' types=DefTypes '};')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'DefTypes{'
		public Keyword getDefTypesKeyword_3_0() { return cDefTypesKeyword_3_0; }
		
		//types=DefTypes
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }
		
		//DefTypes
		public RuleCall getTypesDefTypesParserRuleCall_3_1_0() { return cTypesDefTypesParserRuleCall_3_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_3_2() { return cRightCurlyBracketSemicolonKeyword_3_2; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_4() { return cRightCurlyBracketSemicolonKeyword_4; }
	}
	public class AdaptationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AdaptationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptationModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServicesServicesParserRuleCall_1_0 = (RuleCall)cServicesAssignment_1.eContents().get(0);
		private final Keyword cFlowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlowNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlowNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFlowNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAdaptationRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdaptationRulesAdaptationRuleParserRuleCall_5_0 = (RuleCall)cAdaptationRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AdaptationModel:
		//	'AdaptationModel{'
		//	services=Services?
		//	'flow' flowName=STRING '{'
		//	adaptationRules+=AdaptationRule+
		//	'};'
		//	'};';
		@Override public ParserRule getRule() { return rule; }
		
		//'AdaptationModel{' services=Services? 'flow' flowName=STRING '{' adaptationRules+=AdaptationRule+ '};' '};'
		public Group getGroup() { return cGroup; }
		
		//'AdaptationModel{'
		public Keyword getAdaptationModelKeyword_0() { return cAdaptationModelKeyword_0; }
		
		//services=Services?
		public Assignment getServicesAssignment_1() { return cServicesAssignment_1; }
		
		//Services
		public RuleCall getServicesServicesParserRuleCall_1_0() { return cServicesServicesParserRuleCall_1_0; }
		
		//'flow'
		public Keyword getFlowKeyword_2() { return cFlowKeyword_2; }
		
		//flowName=STRING
		public Assignment getFlowNameAssignment_3() { return cFlowNameAssignment_3; }
		
		//STRING
		public RuleCall getFlowNameSTRINGTerminalRuleCall_3_0() { return cFlowNameSTRINGTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//adaptationRules+=AdaptationRule+
		public Assignment getAdaptationRulesAssignment_5() { return cAdaptationRulesAssignment_5; }
		
		//AdaptationRule
		public RuleCall getAdaptationRulesAdaptationRuleParserRuleCall_5_0() { return cAdaptationRulesAdaptationRuleParserRuleCall_5_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_6() { return cRightCurlyBracketSemicolonKeyword_6; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class ServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Services");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThisServiceParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextServicesParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//Services ServiceList:
		//	this=Service next=Services?;
		@Override public ParserRule getRule() { return rule; }
		
		//this=Service next=Services?
		public Group getGroup() { return cGroup; }
		
		//this=Service
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }
		
		//Service
		public RuleCall getThisServiceParserRuleCall_0_0() { return cThisServiceParserRuleCall_0_0; }
		
		//next=Services?
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//Services
		public RuleCall getNextServicesParserRuleCall_1_0() { return cNextServicesParserRuleCall_1_0; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdSTRINGTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFunctionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionsFunctionsParserRuleCall_7_0 = (RuleCall)cFunctionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Service:
		//	'service' type=ID 'from' loc=STRING 'as' id=STRING '{'
		//	functions=Functions
		//	'};';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' type=ID 'from' loc=STRING 'as' id=STRING '{' functions=Functions '};'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//loc=STRING
		public Assignment getLocAssignment_3() { return cLocAssignment_3; }
		
		//STRING
		public RuleCall getLocSTRINGTerminalRuleCall_3_0() { return cLocSTRINGTerminalRuleCall_3_0; }
		
		//'as'
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//id=STRING
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_5_0() { return cIdSTRINGTerminalRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//functions=Functions
		public Assignment getFunctionsAssignment_7() { return cFunctionsAssignment_7; }
		
		//Functions
		public RuleCall getFunctionsFunctionsParserRuleCall_7_0() { return cFunctionsFunctionsParserRuleCall_7_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_8() { return cRightCurlyBracketSemicolonKeyword_8; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Functions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThisFunctionParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextFunctionsParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//Functions FunctionList:
		//	this=Function next=Functions?;
		@Override public ParserRule getRule() { return rule; }
		
		//this=Function next=Functions?
		public Group getGroup() { return cGroup; }
		
		//this=Function
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }
		
		//Function
		public RuleCall getThisFunctionParserRuleCall_0_0() { return cThisFunctionParserRuleCall_0_0; }
		
		//next=Functions?
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//Functions
		public RuleCall getNextFunctionsParserRuleCall_1_0() { return cNextFunctionsParserRuleCall_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//	'function' name=ID 'as' id=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID 'as' id=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AdaptationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AdaptationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLEVELKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLevelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLevelINTTerminalRuleCall_4_0 = (RuleCall)cLevelAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFACTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFactTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFactTypeIDTerminalRuleCall_7_0 = (RuleCall)cFactTypeAssignment_7.eContents().get(0);
		private final Assignment cFactNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFactNameFactNameParserRuleCall_8_0 = (RuleCall)cFactNameAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cIFKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cExprAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cExprConditionalORParserRuleCall_12_0 = (RuleCall)cExprAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTHENKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cActionCollectionAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cActionCollectionActionsParserRuleCall_16_0 = (RuleCall)cActionCollectionAssignment_16.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cSemicolonKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		
		//AdaptationRule:
		//	'rule' name=STRING '{'
		//	'LEVEL' level=INT ';'
		//	'FACT' factType=ID factName=FactName ';'
		//	'IF' '(' expr=ConditionalOR ')'
		//	'THEN' '('
		//	actionCollection=Actions
		//	')' ';' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=STRING '{' 'LEVEL' level=INT ';' 'FACT' factType=ID factName=FactName ';' 'IF' '(' expr=ConditionalOR ')'
		//'THEN' '(' actionCollection=Actions ')' ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'LEVEL'
		public Keyword getLEVELKeyword_3() { return cLEVELKeyword_3; }
		
		//level=INT
		public Assignment getLevelAssignment_4() { return cLevelAssignment_4; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_4_0() { return cLevelINTTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'FACT'
		public Keyword getFACTKeyword_6() { return cFACTKeyword_6; }
		
		//factType=ID
		public Assignment getFactTypeAssignment_7() { return cFactTypeAssignment_7; }
		
		//ID
		public RuleCall getFactTypeIDTerminalRuleCall_7_0() { return cFactTypeIDTerminalRuleCall_7_0; }
		
		//factName=FactName
		public Assignment getFactNameAssignment_8() { return cFactNameAssignment_8; }
		
		//FactName
		public RuleCall getFactNameFactNameParserRuleCall_8_0() { return cFactNameFactNameParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'IF'
		public Keyword getIFKeyword_10() { return cIFKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//expr=ConditionalOR
		public Assignment getExprAssignment_12() { return cExprAssignment_12; }
		
		//ConditionalOR
		public RuleCall getExprConditionalORParserRuleCall_12_0() { return cExprConditionalORParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
		
		//'THEN'
		public Keyword getTHENKeyword_14() { return cTHENKeyword_14; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_15() { return cLeftParenthesisKeyword_15; }
		
		//actionCollection=Actions
		public Assignment getActionCollectionAssignment_16() { return cActionCollectionAssignment_16; }
		
		//Actions
		public RuleCall getActionCollectionActionsParserRuleCall_16_0() { return cActionCollectionActionsParserRuleCall_16_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_17() { return cRightParenthesisKeyword_17; }
		
		//';'
		public Keyword getSemicolonKeyword_18() { return cSemicolonKeyword_18; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
	}
	public class ConditionalORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ConditionalOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftConditionalANDParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConditionalORParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConditionalOR ConditionalOrExpression:
		//	left=ConditionalAND ('||' right=ConditionalOR)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ConditionalAND ('||' right=ConditionalOR)?
		public Group getGroup() { return cGroup; }
		
		//left=ConditionalAND
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ConditionalAND
		public RuleCall getLeftConditionalANDParserRuleCall_0_0() { return cLeftConditionalANDParserRuleCall_0_0; }
		
		//('||' right=ConditionalOR)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//right=ConditionalOR
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ConditionalOR
		public RuleCall getRightConditionalORParserRuleCall_1_1_0() { return cRightConditionalORParserRuleCall_1_1_0; }
	}
	public class ConditionalANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ConditionalAND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftConditionalPrimaryParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConditionalANDParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConditionalAND ConditionalAndExpression:
		//	left=ConditionalPrimary ('&&' right=ConditionalAND)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ConditionalPrimary ('&&' right=ConditionalAND)?
		public Group getGroup() { return cGroup; }
		
		//left=ConditionalPrimary
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ConditionalPrimary
		public RuleCall getLeftConditionalPrimaryParserRuleCall_0_0() { return cLeftConditionalPrimaryParserRuleCall_0_0; }
		
		//('&&' right=ConditionalAND)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//right=ConditionalAND
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ConditionalAND
		public RuleCall getRightConditionalANDParserRuleCall_1_1_0() { return cRightConditionalANDParserRuleCall_1_1_0; }
	}
	public class ConditionalPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ConditionalPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCondAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCondStringConditionParserRuleCall_0_0 = (RuleCall)cCondAssignment_0.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCondNumberConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Assignment cCondAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCondBooleanConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		
		//ConditionalPrimary:
		//	cond=StringCondition
		//	| cond=NumberCondition
		//	| cond=BooleanCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//cond=StringCondition | cond=NumberCondition | cond=BooleanCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cond=StringCondition
		public Assignment getCondAssignment_0() { return cCondAssignment_0; }
		
		//StringCondition
		public RuleCall getCondStringConditionParserRuleCall_0_0() { return cCondStringConditionParserRuleCall_0_0; }
		
		//cond=NumberCondition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//NumberCondition
		public RuleCall getCondNumberConditionParserRuleCall_1_0() { return cCondNumberConditionParserRuleCall_1_0; }
		
		//cond=BooleanCondition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//BooleanCondition
		public RuleCall getCondBooleanConditionParserRuleCall_2_0() { return cCondBooleanConditionParserRuleCall_2_0; }
	}
	public class BooleanConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.BooleanCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFactAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_0_0_0 = (RuleCall)cFactAssignment_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpBoolOperatorsParserRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cValAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValBOOLTerminalRuleCall_0_2_0 = (RuleCall)cValAssignment_0_2.eContents().get(0);
		private final Assignment cFactAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFactFactParserRuleCall_1_0 = (RuleCall)cFactAssignment_1.eContents().get(0);
		
		//BooleanCondition:
		//	fact=Fact op=BoolOperators val=BOOL | fact=Fact;
		@Override public ParserRule getRule() { return rule; }
		
		//fact=Fact op=BoolOperators val=BOOL | fact=Fact
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fact=Fact op=BoolOperators val=BOOL
		public Group getGroup_0() { return cGroup_0; }
		
		//fact=Fact
		public Assignment getFactAssignment_0_0() { return cFactAssignment_0_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_0_0_0() { return cFactFactParserRuleCall_0_0_0; }
		
		//op=BoolOperators
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//BoolOperators
		public RuleCall getOpBoolOperatorsParserRuleCall_0_1_0() { return cOpBoolOperatorsParserRuleCall_0_1_0; }
		
		//val=BOOL
		public Assignment getValAssignment_0_2() { return cValAssignment_0_2; }
		
		//BOOL
		public RuleCall getValBOOLTerminalRuleCall_0_2_0() { return cValBOOLTerminalRuleCall_0_2_0; }
		
		//fact=Fact
		public Assignment getFactAssignment_1() { return cFactAssignment_1; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_1_0() { return cFactFactParserRuleCall_1_0; }
	}
	public class NumberConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.NumberCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_0_0 = (RuleCall)cFactAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpNumberOperatorsParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINTTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//NumberCondition:
		//	fact=Fact op=NumberOperators val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//fact=Fact op=NumberOperators val=INT
		public Group getGroup() { return cGroup; }
		
		//fact=Fact
		public Assignment getFactAssignment_0() { return cFactAssignment_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_0_0() { return cFactFactParserRuleCall_0_0; }
		
		//op=NumberOperators
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//NumberOperators
		public RuleCall getOpNumberOperatorsParserRuleCall_1_0() { return cOpNumberOperatorsParserRuleCall_1_0; }
		
		//val=INT
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_2_0() { return cValINTTerminalRuleCall_2_0; }
	}
	public class StringConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.StringCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_0_0 = (RuleCall)cFactAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpStringOperatorsParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValSTRINGTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//StringCondition:
		//	fact=Fact op=StringOperators val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//fact=Fact op=StringOperators val=STRING
		public Group getGroup() { return cGroup; }
		
		//fact=Fact
		public Assignment getFactAssignment_0() { return cFactAssignment_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_0_0() { return cFactFactParserRuleCall_0_0; }
		
		//op=StringOperators
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//StringOperators
		public RuleCall getOpStringOperatorsParserRuleCall_1_0() { return cOpStringOperatorsParserRuleCall_1_0; }
		
		//val=STRING
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_0() { return cValSTRINGTerminalRuleCall_2_0; }
	}
	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFactNameFactNameCrossReference_0_0 = (CrossReference)cFactNameAssignment_0.eContents().get(0);
		private final RuleCall cFactNameFactNameIDTerminalRuleCall_0_0_1 = (RuleCall)cFactNameFactNameCrossReference_0_0.eContents().get(1);
		private final Keyword cGetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cGetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyNameIDTerminalRuleCall_5_0 = (RuleCall)cPropertyNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Fact:
		//	factName=[FactName] '.get' entity=[Entity] '()' '.get' propertyName=ID '()';
		@Override public ParserRule getRule() { return rule; }
		
		////ID('()')?('.'ID('()')?)*
		//factName=[FactName] '.get' entity=[Entity] '()' '.get' propertyName=ID '()'
		public Group getGroup() { return cGroup; }
		
		////ID('()')?('.'ID('()')?)*
		//factName=[FactName]
		public Assignment getFactNameAssignment_0() { return cFactNameAssignment_0; }
		
		//[FactName]
		public CrossReference getFactNameFactNameCrossReference_0_0() { return cFactNameFactNameCrossReference_0_0; }
		
		//ID
		public RuleCall getFactNameFactNameIDTerminalRuleCall_0_0_1() { return cFactNameFactNameIDTerminalRuleCall_0_0_1; }
		
		//'.get'
		public Keyword getGetKeyword_1() { return cGetKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }
		
		//'.get'
		public Keyword getGetKeyword_4() { return cGetKeyword_4; }
		
		//propertyName=ID
		public Assignment getPropertyNameAssignment_5() { return cPropertyNameAssignment_5; }
		
		//ID
		public RuleCall getPropertyNameIDTerminalRuleCall_5_0() { return cPropertyNameIDTerminalRuleCall_5_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_6() { return cLeftParenthesisRightParenthesisKeyword_6; }
	}
	public class FactNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.FactName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FactName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FactPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.FactProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFactNameFactNameCrossReference_0_0 = (CrossReference)cFactNameAssignment_0.eContents().get(0);
		private final RuleCall cFactNameFactNameIDTerminalRuleCall_0_0_1 = (RuleCall)cFactNameFactNameCrossReference_0_0.eContents().get(1);
		private final Keyword cGetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyNameIDTerminalRuleCall_5_0 = (RuleCall)cPropertyNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueValueParserRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FactProperty:
		//	factName=[FactName] '.get' entity=[Entity] '()' '.set' propertyName=ID '(' value=Value ')';
		@Override public ParserRule getRule() { return rule; }
		
		////	ID('()')?('.'ID('()')?)*'.'ID('('Value')')?
		//factName=[FactName] '.get' entity=[Entity] '()' '.set' propertyName=ID '(' value=Value ')'
		public Group getGroup() { return cGroup; }
		
		////	ID('()')?('.'ID('()')?)*'.'ID('('Value')')?
		//factName=[FactName]
		public Assignment getFactNameAssignment_0() { return cFactNameAssignment_0; }
		
		//[FactName]
		public CrossReference getFactNameFactNameCrossReference_0_0() { return cFactNameFactNameCrossReference_0_0; }
		
		//ID
		public RuleCall getFactNameFactNameIDTerminalRuleCall_0_0_1() { return cFactNameFactNameIDTerminalRuleCall_0_0_1; }
		
		//'.get'
		public Keyword getGetKeyword_1() { return cGetKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }
		
		//'.set'
		public Keyword getSetKeyword_4() { return cSetKeyword_4; }
		
		//propertyName=ID
		public Assignment getPropertyNameAssignment_5() { return cPropertyNameAssignment_5; }
		
		//ID
		public RuleCall getPropertyNameIDTerminalRuleCall_5_0() { return cPropertyNameIDTerminalRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//value=Value
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_7_0() { return cValueValueParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class NumberOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.NumberOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//NumberOperators:
		//	'>' | '<' | '==' | '!=' | '>=' | '<=' | '===';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '==' | '!=' | '>=' | '<=' | '==='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_6() { return cEqualsSignEqualsSignEqualsSignKeyword_6; }
	}
	public class StringOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.StringOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//StringOperators:
		//	'==' | '!=' | '===';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '==='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
	}
	public class BoolOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.BoolOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolOperators:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Actions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextActionsParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//Actions:
		//	action=Action next=Actions?;
		@Override public ParserRule getRule() { return rule; }
		
		//action=Action next=Actions?
		public Group getGroup() { return cGroup; }
		
		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }
		
		//next=Actions?
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//Actions
		public RuleCall getNextActionsParserRuleCall_1_0() { return cNextActionsParserRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cActionCategoryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cActionCategoryServiceOperationParserRuleCall_0_0 = (RuleCall)cActionCategoryAssignment_0.eContents().get(0);
		private final Assignment cActionCategoryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cActionCategoryTaskChangeOperationParserRuleCall_1_0 = (RuleCall)cActionCategoryAssignment_1.eContents().get(0);
		private final Assignment cActionCategoryAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cActionCategoryNavigationChangeOperationParserRuleCall_2_0 = (RuleCall)cActionCategoryAssignment_2.eContents().get(0);
		private final Assignment cActionCategoryAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cActionCategoryLayoutChangeOperationParserRuleCall_3_0 = (RuleCall)cActionCategoryAssignment_3.eContents().get(0);
		
		//Action ActionCategory:
		//	actionCategory=ServiceOperation | actionCategory=TaskChangeOperation | actionCategory=NavigationChangeOperation |
		//	actionCategory=LayoutChangeOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//actionCategory=ServiceOperation | actionCategory=TaskChangeOperation | actionCategory=NavigationChangeOperation |
		//actionCategory=LayoutChangeOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actionCategory=ServiceOperation
		public Assignment getActionCategoryAssignment_0() { return cActionCategoryAssignment_0; }
		
		//ServiceOperation
		public RuleCall getActionCategoryServiceOperationParserRuleCall_0_0() { return cActionCategoryServiceOperationParserRuleCall_0_0; }
		
		//actionCategory=TaskChangeOperation
		public Assignment getActionCategoryAssignment_1() { return cActionCategoryAssignment_1; }
		
		//TaskChangeOperation
		public RuleCall getActionCategoryTaskChangeOperationParserRuleCall_1_0() { return cActionCategoryTaskChangeOperationParserRuleCall_1_0; }
		
		//actionCategory=NavigationChangeOperation
		public Assignment getActionCategoryAssignment_2() { return cActionCategoryAssignment_2; }
		
		//NavigationChangeOperation
		public RuleCall getActionCategoryNavigationChangeOperationParserRuleCall_2_0() { return cActionCategoryNavigationChangeOperationParserRuleCall_2_0; }
		
		//actionCategory=LayoutChangeOperation
		public Assignment getActionCategoryAssignment_3() { return cActionCategoryAssignment_3; }
		
		//LayoutChangeOperation
		public RuleCall getActionCategoryLayoutChangeOperationParserRuleCall_3_0() { return cActionCategoryLayoutChangeOperationParserRuleCall_3_0; }
	}
	public class ServiceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ServiceOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperationServiceFunctionCallOperationParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperationEditFactOperationParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOperationSetDisplayPropertyOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		
		//ServiceOperation ParentOperation:
		//	operation=ServiceFunctionCallOperation | operation=EditFactOperation | operation=SetDisplayPropertyOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=ServiceFunctionCallOperation | operation=EditFactOperation | operation=SetDisplayPropertyOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operation=ServiceFunctionCallOperation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//ServiceFunctionCallOperation
		public RuleCall getOperationServiceFunctionCallOperationParserRuleCall_0_0() { return cOperationServiceFunctionCallOperationParserRuleCall_0_0; }
		
		//operation=EditFactOperation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//EditFactOperation
		public RuleCall getOperationEditFactOperationParserRuleCall_1_0() { return cOperationEditFactOperationParserRuleCall_1_0; }
		
		//operation=SetDisplayPropertyOperation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//SetDisplayPropertyOperation
		public RuleCall getOperationSetDisplayPropertyOperationParserRuleCall_2_0() { return cOperationSetDisplayPropertyOperationParserRuleCall_2_0; }
	}
	public class ServiceFunctionCallOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ServiceFunctionCallOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceIDTerminalRuleCall_2_0 = (RuleCall)cServiceAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionIDTerminalRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValValueParserRuleCall_6_0 = (RuleCall)cValAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ServiceFunctionCallOperation:
		//	'functionCall' '(' service=ID ',' function=ID ',' val=Value ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'functionCall' '(' service=ID ',' function=ID ',' val=Value ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'functionCall'
		public Keyword getFunctionCallKeyword_0() { return cFunctionCallKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//service=ID
		public Assignment getServiceAssignment_2() { return cServiceAssignment_2; }
		
		//ID
		public RuleCall getServiceIDTerminalRuleCall_2_0() { return cServiceIDTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//function=ID
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }
		
		//ID
		public RuleCall getFunctionIDTerminalRuleCall_4_0() { return cFunctionIDTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//val=Value
		public Assignment getValAssignment_6() { return cValAssignment_6; }
		
		//Value
		public RuleCall getValValueParserRuleCall_6_0() { return cValValueParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class EditFactOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.EditFactOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEditFactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropFactPropertyParserRuleCall_2_0 = (RuleCall)cPropAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValValueParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EditFactOperation: // set FactProperty to Value
		//	'editFact' '(' prop=FactProperty (',' val=Value)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// set FactProperty to Value
		//'editFact' '(' prop=FactProperty (',' val=Value)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// set FactProperty to Value
		//'editFact'
		public Keyword getEditFactKeyword_0() { return cEditFactKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//prop=FactProperty
		public Assignment getPropAssignment_2() { return cPropAssignment_2; }
		
		//FactProperty
		public RuleCall getPropFactPropertyParserRuleCall_2_0() { return cPropFactPropertyParserRuleCall_2_0; }
		
		//(',' val=Value)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//val=Value
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//Value
		public RuleCall getValValueParserRuleCall_3_1_0() { return cValValueParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SetDisplayPropertyOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.SetDisplayPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetDisplayPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertySTRINGTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyValueDisplayPropertyValueParserRuleCall_4_0 = (RuleCall)cPropertyValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SetDisplayPropertyOperation:
		//	'setDisplayProperty' '(' property=STRING ',' propertyValue=DisplayPropertyValue ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'setDisplayProperty' '(' property=STRING ',' propertyValue=DisplayPropertyValue ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'setDisplayProperty'
		public Keyword getSetDisplayPropertyKeyword_0() { return cSetDisplayPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//property=STRING
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//STRING
		public RuleCall getPropertySTRINGTerminalRuleCall_2_0() { return cPropertySTRINGTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//propertyValue=DisplayPropertyValue
		public Assignment getPropertyValueAssignment_4() { return cPropertyValueAssignment_4; }
		
		//DisplayPropertyValue
		public RuleCall getPropertyValueDisplayPropertyValueParserRuleCall_4_0() { return cPropertyValueDisplayPropertyValueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DisplayPropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DisplayPropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPropertyClassAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyClassIntValueParserRuleCall_0_0 = (RuleCall)cPropertyClassAssignment_0.eContents().get(0);
		private final Assignment cPropertyClassAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyClassStringValueParserRuleCall_1_0 = (RuleCall)cPropertyClassAssignment_1.eContents().get(0);
		private final Assignment cPropertyClassAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyClassBoolValueParserRuleCall_2_0 = (RuleCall)cPropertyClassAssignment_2.eContents().get(0);
		
		//DisplayPropertyValue:
		//	propertyClass=IntValue | propertyClass=StringValue | propertyClass=BoolValue;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyClass=IntValue | propertyClass=StringValue | propertyClass=BoolValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//propertyClass=IntValue
		public Assignment getPropertyClassAssignment_0() { return cPropertyClassAssignment_0; }
		
		//IntValue
		public RuleCall getPropertyClassIntValueParserRuleCall_0_0() { return cPropertyClassIntValueParserRuleCall_0_0; }
		
		//propertyClass=StringValue
		public Assignment getPropertyClassAssignment_1() { return cPropertyClassAssignment_1; }
		
		//StringValue
		public RuleCall getPropertyClassStringValueParserRuleCall_1_0() { return cPropertyClassStringValueParserRuleCall_1_0; }
		
		//propertyClass=BoolValue
		public Assignment getPropertyClassAssignment_2() { return cPropertyClassAssignment_2; }
		
		//BoolValue
		public RuleCall getPropertyClassBoolValueParserRuleCall_2_0() { return cPropertyClassBoolValueParserRuleCall_2_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.BoolValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BoolValue:
		//	value=BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}
	public class TaskChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.TaskChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperationAddViewComponentOperationParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperationDeleteViewComponentOperationParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOperationAddViewComponentButtonOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOperationDeleteViewComponentButtonOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//TaskChangeOperation ParentOperation:
		//	operation=AddViewComponentOperation | operation=DeleteViewComponentOperation |
		//	operation=AddViewComponentButtonOperation | operation=DeleteViewComponentButtonOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=AddViewComponentOperation | operation=DeleteViewComponentOperation | operation=AddViewComponentButtonOperation
		//| operation=DeleteViewComponentButtonOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operation=AddViewComponentOperation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//AddViewComponentOperation
		public RuleCall getOperationAddViewComponentOperationParserRuleCall_0_0() { return cOperationAddViewComponentOperationParserRuleCall_0_0; }
		
		//operation=DeleteViewComponentOperation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//DeleteViewComponentOperation
		public RuleCall getOperationDeleteViewComponentOperationParserRuleCall_1_0() { return cOperationDeleteViewComponentOperationParserRuleCall_1_0; }
		
		//operation=AddViewComponentButtonOperation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//AddViewComponentButtonOperation
		public RuleCall getOperationAddViewComponentButtonOperationParserRuleCall_2_0() { return cOperationAddViewComponentButtonOperationParserRuleCall_2_0; }
		
		//operation=DeleteViewComponentButtonOperation
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//DeleteViewComponentButtonOperation
		public RuleCall getOperationDeleteViewComponentButtonOperationParserRuleCall_3_0() { return cOperationDeleteViewComponentButtonOperationParserRuleCall_3_0; }
	}
	public class AddViewComponentOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AddViewComponentOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddViewComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewCompViewComponentParserRuleCall_2_0 = (RuleCall)cViewCompAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetTargetContainerParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AddViewComponentOperation:
		//	'addViewComponent' '(' viewComp=ViewComponent ',' target=TargetContainer ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'addViewComponent' '(' viewComp=ViewComponent ',' target=TargetContainer ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'addViewComponent'
		public Keyword getAddViewComponentKeyword_0() { return cAddViewComponentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//viewComp=ViewComponent
		public Assignment getViewCompAssignment_2() { return cViewCompAssignment_2; }
		
		//ViewComponent
		public RuleCall getViewCompViewComponentParserRuleCall_2_0() { return cViewCompViewComponentParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//target=TargetContainer
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//TargetContainer
		public RuleCall getTargetTargetContainerParserRuleCall_4_0() { return cTargetTargetContainerParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DeleteViewComponentOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DeleteViewComponentOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteViewComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewCompViewComponentParserRuleCall_2_0 = (RuleCall)cViewCompAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteViewComponentOperation:
		//	'deleteViewComponent' '(' viewComp=ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'deleteViewComponent' '(' viewComp=ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'deleteViewComponent'
		public Keyword getDeleteViewComponentKeyword_0() { return cDeleteViewComponentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//viewComp=ViewComponent
		public Assignment getViewCompAssignment_2() { return cViewCompAssignment_2; }
		
		//ViewComponent
		public RuleCall getViewCompViewComponentParserRuleCall_2_0() { return cViewCompViewComponentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AddViewComponentButtonOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AddViewComponentButtonOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddViewComponentButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLangKeyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLangKeySTRINGTerminalRuleCall_4_0 = (RuleCall)cLangKeyAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionSTRINGTerminalRuleCall_6_0 = (RuleCall)cActionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AddViewComponentButtonOperation:
		//	'addViewComponentButton' '(' id=STRING ',' langKey=STRING ',' action=STRING ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'addViewComponentButton' '(' id=STRING ',' langKey=STRING ',' action=STRING ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'addViewComponentButton'
		public Keyword getAddViewComponentButtonKeyword_0() { return cAddViewComponentButtonKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//langKey=STRING
		public Assignment getLangKeyAssignment_4() { return cLangKeyAssignment_4; }
		
		//STRING
		public RuleCall getLangKeySTRINGTerminalRuleCall_4_0() { return cLangKeySTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//action=STRING
		public Assignment getActionAssignment_6() { return cActionAssignment_6; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_6_0() { return cActionSTRINGTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class DeleteViewComponentButtonOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DeleteViewComponentButtonOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteViewComponentButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteViewComponentButtonOperation:
		//	'deleteViewComponentButton' '(' id=STRING ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'deleteViewComponentButton' '(' id=STRING ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'deleteViewComponentButton'
		public Keyword getDeleteViewComponentButtonKeyword_0() { return cDeleteViewComponentButtonKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ViewComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ViewComponent");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ViewComponent:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class TargetContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.TargetContainer");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TargetContainer:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class NavigationChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.NavigationChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperationAddNavLinkOperationParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperationDeleteNavLinkOperationParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOperationRedirectNavLinkOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOperationClearNavOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//NavigationChangeOperation ParentOperation:
		//	operation=AddNavLinkOperation | operation=DeleteNavLinkOperation | operation=RedirectNavLinkOperation |
		//	operation=ClearNavOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=AddNavLinkOperation | operation=DeleteNavLinkOperation | operation=RedirectNavLinkOperation |
		//operation=ClearNavOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operation=AddNavLinkOperation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//AddNavLinkOperation
		public RuleCall getOperationAddNavLinkOperationParserRuleCall_0_0() { return cOperationAddNavLinkOperationParserRuleCall_0_0; }
		
		//operation=DeleteNavLinkOperation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//DeleteNavLinkOperation
		public RuleCall getOperationDeleteNavLinkOperationParserRuleCall_1_0() { return cOperationDeleteNavLinkOperationParserRuleCall_1_0; }
		
		//operation=RedirectNavLinkOperation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//RedirectNavLinkOperation
		public RuleCall getOperationRedirectNavLinkOperationParserRuleCall_2_0() { return cOperationRedirectNavLinkOperationParserRuleCall_2_0; }
		
		//operation=ClearNavOperation
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//ClearNavOperation
		public RuleCall getOperationClearNavOperationParserRuleCall_3_0() { return cOperationClearNavOperationParserRuleCall_3_0; }
	}
	public class AddNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AddNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewCompViewComponentParserRuleCall_2_0 = (RuleCall)cViewCompAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextTextParserRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AddNavLinkOperation: // add a navigation link to <ViewComponent> with link description <Text>
		//	'addNavLink' '(' viewComp=ViewComponent ',' text=Text ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// add a navigation link to <ViewComponent> with link description <Text>
		//'addNavLink' '(' viewComp=ViewComponent ',' text=Text ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// add a navigation link to <ViewComponent> with link description <Text>
		//'addNavLink'
		public Keyword getAddNavLinkKeyword_0() { return cAddNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//viewComp=ViewComponent
		public Assignment getViewCompAssignment_2() { return cViewCompAssignment_2; }
		
		//ViewComponent
		public RuleCall getViewCompViewComponentParserRuleCall_2_0() { return cViewCompViewComponentParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//text=Text
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_0() { return cTextTextParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DeleteNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DeleteNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewCompViewComponentParserRuleCall_2_0 = (RuleCall)cViewCompAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteNavLinkOperation: // delete link to <ViewComponent> from navigation
		//	'deleteNavLink' '(' viewComp=ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// delete link to <ViewComponent> from navigation
		//'deleteNavLink' '(' viewComp=ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// delete link to <ViewComponent> from navigation
		//'deleteNavLink'
		public Keyword getDeleteNavLinkKeyword_0() { return cDeleteNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//viewComp=ViewComponent
		public Assignment getViewCompAssignment_2() { return cViewCompAssignment_2; }
		
		//ViewComponent
		public RuleCall getViewCompViewComponentParserRuleCall_2_0() { return cViewCompViewComponentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RedirectNavLinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.RedirectNavLinkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedirectNavLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewCompViewComponentParserRuleCall_2_0 = (RuleCall)cViewCompAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RedirectNavLinkOperation: // redirect to <ViewComponent>
		//	'redirectNavLink' '(' viewComp=ViewComponent ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// redirect to <ViewComponent>
		//'redirectNavLink' '(' viewComp=ViewComponent ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// redirect to <ViewComponent>
		//'redirectNavLink'
		public Keyword getRedirectNavLinkKeyword_0() { return cRedirectNavLinkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//viewComp=ViewComponent
		public Assignment getViewCompAssignment_2() { return cViewCompAssignment_2; }
		
		//ViewComponent
		public RuleCall getViewCompViewComponentParserRuleCall_2_0() { return cViewCompViewComponentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ClearNavOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ClearNavOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClearNavOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClearNavigationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClearNavOperation:
		//	{ClearNavOperation} 'clearNavigation' '()' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClearNavOperation} 'clearNavigation' '()' ';'
		public Group getGroup() { return cGroup; }
		
		//{ClearNavOperation}
		public Action getClearNavOperationAction_0() { return cClearNavOperationAction_0; }
		
		//'clearNavigation'
		public Keyword getClearNavigationKeyword_1() { return cClearNavigationKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Text");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Text:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class LayoutChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.LayoutChangeOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperationChangeFontOperationParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperationChangeFontSizeOperationParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOperationChangeTableCssClassOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOperationAdaptCssClassOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		private final Assignment cOperationAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOperationChangeColorSchemeOperationParserRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		
		//LayoutChangeOperation ParentOperation:
		//	operation=ChangeFontOperation | operation=ChangeFontSizeOperation | operation=ChangeTableCssClassOperation |
		//	operation=AdaptCssClassOperation | operation=ChangeColorSchemeOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=ChangeFontOperation | operation=ChangeFontSizeOperation | operation=ChangeTableCssClassOperation |
		//operation=AdaptCssClassOperation | operation=ChangeColorSchemeOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operation=ChangeFontOperation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//ChangeFontOperation
		public RuleCall getOperationChangeFontOperationParserRuleCall_0_0() { return cOperationChangeFontOperationParserRuleCall_0_0; }
		
		//operation=ChangeFontSizeOperation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//ChangeFontSizeOperation
		public RuleCall getOperationChangeFontSizeOperationParserRuleCall_1_0() { return cOperationChangeFontSizeOperationParserRuleCall_1_0; }
		
		//operation=ChangeTableCssClassOperation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//ChangeTableCssClassOperation
		public RuleCall getOperationChangeTableCssClassOperationParserRuleCall_2_0() { return cOperationChangeTableCssClassOperationParserRuleCall_2_0; }
		
		//operation=AdaptCssClassOperation
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//AdaptCssClassOperation
		public RuleCall getOperationAdaptCssClassOperationParserRuleCall_3_0() { return cOperationAdaptCssClassOperationParserRuleCall_3_0; }
		
		//operation=ChangeColorSchemeOperation
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }
		
		//ChangeColorSchemeOperation
		public RuleCall getOperationChangeColorSchemeOperationParserRuleCall_4_0() { return cOperationChangeColorSchemeOperationParserRuleCall_4_0; }
	}
	public class ChangeFontSizeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ChangeFontSizeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizePrimaryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizePrimaryFontSizeParserRuleCall_2_0 = (RuleCall)cSizePrimaryAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeSecondaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeSecondaryFontSizeParserRuleCall_4_0 = (RuleCall)cSizeSecondaryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChangeFontSizeOperation: // Change primary and secondary font size
		//	'changeFontSize' '(' sizePrimary=FontSize ',' sizeSecondary=FontSize ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// Change primary and secondary font size
		//'changeFontSize' '(' sizePrimary=FontSize ',' sizeSecondary=FontSize ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// Change primary and secondary font size
		//'changeFontSize'
		public Keyword getChangeFontSizeKeyword_0() { return cChangeFontSizeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//sizePrimary=FontSize
		public Assignment getSizePrimaryAssignment_2() { return cSizePrimaryAssignment_2; }
		
		//FontSize
		public RuleCall getSizePrimaryFontSizeParserRuleCall_2_0() { return cSizePrimaryFontSizeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//sizeSecondary=FontSize
		public Assignment getSizeSecondaryAssignment_4() { return cSizeSecondaryAssignment_4; }
		
		//FontSize
		public RuleCall getSizeSecondaryFontSizeParserRuleCall_4_0() { return cSizeSecondaryFontSizeParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ChangeColorSchemeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ChangeColorSchemeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeColorSchemeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorPrimaryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorPrimaryColorParserRuleCall_2_0 = (RuleCall)cColorPrimaryAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColorSecondaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColorSecondaryColorParserRuleCall_4_0 = (RuleCall)cColorSecondaryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChangeColorSchemeOperation: // define color schemes and attributes for color schemes
		//	'changeColorScheme' '(' colorPrimary=Color ',' colorSecondary=Color ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// define color schemes and attributes for color schemes
		//'changeColorScheme' '(' colorPrimary=Color ',' colorSecondary=Color ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// define color schemes and attributes for color schemes
		//'changeColorScheme'
		public Keyword getChangeColorSchemeKeyword_0() { return cChangeColorSchemeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//colorPrimary=Color
		public Assignment getColorPrimaryAssignment_2() { return cColorPrimaryAssignment_2; }
		
		//Color
		public RuleCall getColorPrimaryColorParserRuleCall_2_0() { return cColorPrimaryColorParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//colorSecondary=Color
		public Assignment getColorSecondaryAssignment_4() { return cColorSecondaryAssignment_4; }
		
		//Color
		public RuleCall getColorSecondaryColorParserRuleCall_4_0() { return cColorSecondaryColorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ChangeFontOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ChangeFontOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeFontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextTextParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeFontOperation: // change to font <Text>
		//	'changeFont' '(' text=Text ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// change to font <Text>
		//'changeFont' '(' text=Text ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// change to font <Text>
		//'changeFont'
		public Keyword getChangeFontKeyword_0() { return cChangeFontKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//text=Text
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_2_0() { return cTextTextParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeTableCssClassOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.ChangeTableCssClassOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeTableCssKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextTextParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeTableCssClassOperation: // Define table css classes by <Text>
		//	'changeTableCss' '(' text=Text ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// Define table css classes by <Text>
		//'changeTableCss' '(' text=Text ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// Define table css classes by <Text>
		//'changeTableCss'
		public Keyword getChangeTableCssKeyword_0() { return cChangeTableCssKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//text=Text
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_2_0() { return cTextTextParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AdaptCssClassOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AdaptCssClassOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptCssClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCssClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCssClassCssClassParserRuleCall_2_0 = (RuleCall)cCssClassAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCssAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCssAttributeAttributeParserRuleCall_4_0 = (RuleCall)cCssAttributeAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCssAttributeValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCssAttributeValueAttributeValueParserRuleCall_6_0 = (RuleCall)cCssAttributeValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AdaptCssClassOperation: // basically JQuery changes the attribute of the given css class to attribute value
		//	'adaptCssClass' '(' cssClass=CssClass ',' cssAttribute=Attribute ',' cssAttributeValue=AttributeValue ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// basically JQuery changes the attribute of the given css class to attribute value
		//'adaptCssClass' '(' cssClass=CssClass ',' cssAttribute=Attribute ',' cssAttributeValue=AttributeValue ')' ';'
		public Group getGroup() { return cGroup; }
		
		//// basically JQuery changes the attribute of the given css class to attribute value
		//'adaptCssClass'
		public Keyword getAdaptCssClassKeyword_0() { return cAdaptCssClassKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cssClass=CssClass
		public Assignment getCssClassAssignment_2() { return cCssClassAssignment_2; }
		
		//CssClass
		public RuleCall getCssClassCssClassParserRuleCall_2_0() { return cCssClassCssClassParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//cssAttribute=Attribute
		public Assignment getCssAttributeAssignment_4() { return cCssAttributeAssignment_4; }
		
		//Attribute
		public RuleCall getCssAttributeAttributeParserRuleCall_4_0() { return cCssAttributeAttributeParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//cssAttributeValue=AttributeValue
		public Assignment getCssAttributeValueAssignment_6() { return cCssAttributeValueAssignment_6; }
		
		//AttributeValue
		public RuleCall getCssAttributeValueAttributeValueParserRuleCall_6_0() { return cCssAttributeValueAttributeValueParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class CssClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.CssClass");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CssClass:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Attribute");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Attribute:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.AttributeValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AttributeValue:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Color");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Color:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.FontSize");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FontSize:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	INT | STRING | BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2() { return cBOOLTerminalRuleCall_2; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyPropertyParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	'Entity' name=ID '{'
		//	property+=Property+
		//	'};';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entity' name=ID '{' property+=Property+ '};'
		public Group getGroup() { return cGroup; }
		
		//'Entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property+=Property+
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_3_0() { return cPropertyPropertyParserRuleCall_3_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_4() { return cRightCurlyBracketSemicolonKeyword_4; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTYPEParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cProviderKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProviderAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cProviderProviderCrossReference_6_0 = (CrossReference)cProviderAssignment_6.eContents().get(0);
		private final RuleCall cProviderProviderIDTerminalRuleCall_6_0_1 = (RuleCall)cProviderProviderCrossReference_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cUpdateKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUpdateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUpdateUpdateTypeParserRuleCall_9_0 = (RuleCall)cUpdateAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Property:
		//	name=ID '{' 'type' type=TYPE ',' 'provider' provider=[Provider] ',' 'update' update=UpdateType '};';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'type' type=TYPE ',' 'provider' provider=[Provider] ',' 'update' update=UpdateType '};'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=TYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_3_0() { return cTypeTYPEParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'provider'
		public Keyword getProviderKeyword_5() { return cProviderKeyword_5; }
		
		//provider=[Provider]
		public Assignment getProviderAssignment_6() { return cProviderAssignment_6; }
		
		//[Provider]
		public CrossReference getProviderProviderCrossReference_6_0() { return cProviderProviderCrossReference_6_0; }
		
		//ID
		public RuleCall getProviderProviderIDTerminalRuleCall_6_0_1() { return cProviderProviderIDTerminalRuleCall_6_0_1; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'update'
		public Keyword getUpdateKeyword_8() { return cUpdateKeyword_8; }
		
		//update=UpdateType
		public Assignment getUpdateAssignment_9() { return cUpdateAssignment_9; }
		
		//UpdateType
		public RuleCall getUpdateUpdateTypeParserRuleCall_9_0() { return cUpdateUpdateTypeParserRuleCall_9_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_10() { return cRightCurlyBracketSemicolonKeyword_10; }
	}
	public class ProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Provider");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Provider:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DefTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DefTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThisDefTypeParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextDefTypesParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//DefTypes:
		//	this=DefType
		//	next=DefTypes?;
		@Override public ParserRule getRule() { return rule; }
		
		//this=DefType next=DefTypes?
		public Group getGroup() { return cGroup; }
		
		//this=DefType
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }
		
		//DefType
		public RuleCall getThisDefTypeParserRuleCall_0_0() { return cThisDefTypeParserRuleCall_0_0; }
		
		//next=DefTypes?
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//DefTypes
		public RuleCall getNextDefTypesParserRuleCall_1_0() { return cNextDefTypesParserRuleCall_1_0; }
	}
	public class DefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.DefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnumsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumsEnumsParserRuleCall_2_0 = (RuleCall)cEnumsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefType:
		//	name=ID ':' enums=Enums ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' enums=Enums ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//enums=Enums
		public Assignment getEnumsAssignment_2() { return cEnumsAssignment_2; }
		
		//Enums
		public RuleCall getEnumsEnumsParserRuleCall_2_0() { return cEnumsEnumsParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Enums");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThisEnumParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextEnumsParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//Enums:
		//	this=Enum (',' next=Enums)?;
		@Override public ParserRule getRule() { return rule; }
		
		//this=Enum (',' next=Enums)?
		public Group getGroup() { return cGroup; }
		
		//this=Enum
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }
		
		//Enum
		public RuleCall getThisEnumParserRuleCall_0_0() { return cThisEnumParserRuleCall_0_0; }
		
		//(',' next=Enums)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//next=Enums
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//Enums
		public RuleCall getNextEnumsParserRuleCall_1_1_0() { return cNextEnumsParserRuleCall_1_1_0; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.Enum");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Enum:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNumberNumberKeyword_1_0 = (Keyword)cNumberAssignment_1.eContents().get(0);
		private final Assignment cBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanAssignment_2.eContents().get(0);
		private final Assignment cDeftypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cDeftypeDefTypeCrossReference_3_0 = (CrossReference)cDeftypeAssignment_3.eContents().get(0);
		private final RuleCall cDeftypeDefTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cDeftypeDefTypeCrossReference_3_0.eContents().get(1);
		
		//TYPE:
		//	string='string' | number='number' | boolean='boolean' | deftype=[DefType];
		@Override public ParserRule getRule() { return rule; }
		
		//string='string' | number='number' | boolean='boolean' | deftype=[DefType]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string='string'
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//number='number'
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//'number'
		public Keyword getNumberNumberKeyword_1_0() { return cNumberNumberKeyword_1_0; }
		
		//boolean='boolean'
		public Assignment getBooleanAssignment_2() { return cBooleanAssignment_2; }
		
		//'boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//deftype=[DefType]
		public Assignment getDeftypeAssignment_3() { return cDeftypeAssignment_3; }
		
		//[DefType]
		public CrossReference getDeftypeDefTypeCrossReference_3_0() { return cDeftypeDefTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getDeftypeDefTypeIDTerminalRuleCall_3_0_1() { return cDeftypeDefTypeIDTerminalRuleCall_3_0_1; }
	}
	public class UpdateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.UpdateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEventEventTriggeredKeyword_0_0 = (Keyword)cEventAssignment_0.eContents().get(0);
		private final Assignment cSlowAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSlowSlowKeyword_1_0 = (Keyword)cSlowAssignment_1.eContents().get(0);
		private final Assignment cFastAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cFastFastKeyword_2_0 = (Keyword)cFastAssignment_2.eContents().get(0);
		
		//UpdateType:
		//	event='eventTriggered' | slow='slow' | fast='fast';
		@Override public ParserRule getRule() { return rule; }
		
		//event='eventTriggered' | slow='slow' | fast='fast'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//event='eventTriggered'
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//'eventTriggered'
		public Keyword getEventEventTriggeredKeyword_0_0() { return cEventEventTriggeredKeyword_0_0; }
		
		//slow='slow'
		public Assignment getSlowAssignment_1() { return cSlowAssignment_1; }
		
		//'slow'
		public Keyword getSlowSlowKeyword_1_0() { return cSlowSlowKeyword_1_0; }
		
		//fast='fast'
		public Assignment getFastAssignment_2() { return cFastAssignment_2; }
		
		//'fast'
		public Keyword getFastFastKeyword_2_0() { return cFastFastKeyword_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final ContextModelElements pContextModel;
	private final AdaptationModelElements pAdaptationModel;
	private final ServicesElements pServices;
	private final ServiceElements pService;
	private final FunctionsElements pFunctions;
	private final FunctionElements pFunction;
	private final AdaptationRuleElements pAdaptationRule;
	private final ConditionalORElements pConditionalOR;
	private final ConditionalANDElements pConditionalAND;
	private final ConditionalPrimaryElements pConditionalPrimary;
	private final BooleanConditionElements pBooleanCondition;
	private final NumberConditionElements pNumberCondition;
	private final StringConditionElements pStringCondition;
	private final FactElements pFact;
	private final FactNameElements pFactName;
	private final FactPropertyElements pFactProperty;
	private final NumberOperatorsElements pNumberOperators;
	private final StringOperatorsElements pStringOperators;
	private final BoolOperatorsElements pBoolOperators;
	private final ActionsElements pActions;
	private final ActionElements pAction;
	private final ServiceOperationElements pServiceOperation;
	private final ServiceFunctionCallOperationElements pServiceFunctionCallOperation;
	private final EditFactOperationElements pEditFactOperation;
	private final SetDisplayPropertyOperationElements pSetDisplayPropertyOperation;
	private final DisplayPropertyValueElements pDisplayPropertyValue;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final BoolValueElements pBoolValue;
	private final TaskChangeOperationElements pTaskChangeOperation;
	private final AddViewComponentOperationElements pAddViewComponentOperation;
	private final DeleteViewComponentOperationElements pDeleteViewComponentOperation;
	private final AddViewComponentButtonOperationElements pAddViewComponentButtonOperation;
	private final DeleteViewComponentButtonOperationElements pDeleteViewComponentButtonOperation;
	private final ViewComponentElements pViewComponent;
	private final TargetContainerElements pTargetContainer;
	private final NavigationChangeOperationElements pNavigationChangeOperation;
	private final AddNavLinkOperationElements pAddNavLinkOperation;
	private final DeleteNavLinkOperationElements pDeleteNavLinkOperation;
	private final RedirectNavLinkOperationElements pRedirectNavLinkOperation;
	private final ClearNavOperationElements pClearNavOperation;
	private final TextElements pText;
	private final LayoutChangeOperationElements pLayoutChangeOperation;
	private final ChangeFontSizeOperationElements pChangeFontSizeOperation;
	private final ChangeColorSchemeOperationElements pChangeColorSchemeOperation;
	private final ChangeFontOperationElements pChangeFontOperation;
	private final ChangeTableCssClassOperationElements pChangeTableCssClassOperation;
	private final AdaptCssClassOperationElements pAdaptCssClassOperation;
	private final CssClassElements pCssClass;
	private final AttributeElements pAttribute;
	private final AttributeValueElements pAttributeValue;
	private final ColorElements pColor;
	private final FontSizeElements pFontSize;
	private final ValueElements pValue;
	private final TerminalRule tBOOL;
	private final EntityElements pEntity;
	private final PropertyElements pProperty;
	private final ProviderElements pProvider;
	private final DefTypesElements pDefTypes;
	private final DefTypeElements pDefType;
	private final EnumsElements pEnums;
	private final EnumElements pEnum;
	private final TYPEElements pTYPE;
	private final UpdateTypeElements pUpdateType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptUIGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContextModel = new ContextModelElements();
		this.pAdaptationModel = new AdaptationModelElements();
		this.pServices = new ServicesElements();
		this.pService = new ServiceElements();
		this.pFunctions = new FunctionsElements();
		this.pFunction = new FunctionElements();
		this.pAdaptationRule = new AdaptationRuleElements();
		this.pConditionalOR = new ConditionalORElements();
		this.pConditionalAND = new ConditionalANDElements();
		this.pConditionalPrimary = new ConditionalPrimaryElements();
		this.pBooleanCondition = new BooleanConditionElements();
		this.pNumberCondition = new NumberConditionElements();
		this.pStringCondition = new StringConditionElements();
		this.pFact = new FactElements();
		this.pFactName = new FactNameElements();
		this.pFactProperty = new FactPropertyElements();
		this.pNumberOperators = new NumberOperatorsElements();
		this.pStringOperators = new StringOperatorsElements();
		this.pBoolOperators = new BoolOperatorsElements();
		this.pActions = new ActionsElements();
		this.pAction = new ActionElements();
		this.pServiceOperation = new ServiceOperationElements();
		this.pServiceFunctionCallOperation = new ServiceFunctionCallOperationElements();
		this.pEditFactOperation = new EditFactOperationElements();
		this.pSetDisplayPropertyOperation = new SetDisplayPropertyOperationElements();
		this.pDisplayPropertyValue = new DisplayPropertyValueElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pTaskChangeOperation = new TaskChangeOperationElements();
		this.pAddViewComponentOperation = new AddViewComponentOperationElements();
		this.pDeleteViewComponentOperation = new DeleteViewComponentOperationElements();
		this.pAddViewComponentButtonOperation = new AddViewComponentButtonOperationElements();
		this.pDeleteViewComponentButtonOperation = new DeleteViewComponentButtonOperationElements();
		this.pViewComponent = new ViewComponentElements();
		this.pTargetContainer = new TargetContainerElements();
		this.pNavigationChangeOperation = new NavigationChangeOperationElements();
		this.pAddNavLinkOperation = new AddNavLinkOperationElements();
		this.pDeleteNavLinkOperation = new DeleteNavLinkOperationElements();
		this.pRedirectNavLinkOperation = new RedirectNavLinkOperationElements();
		this.pClearNavOperation = new ClearNavOperationElements();
		this.pText = new TextElements();
		this.pLayoutChangeOperation = new LayoutChangeOperationElements();
		this.pChangeFontSizeOperation = new ChangeFontSizeOperationElements();
		this.pChangeColorSchemeOperation = new ChangeColorSchemeOperationElements();
		this.pChangeFontOperation = new ChangeFontOperationElements();
		this.pChangeTableCssClassOperation = new ChangeTableCssClassOperationElements();
		this.pAdaptCssClassOperation = new AdaptCssClassOperationElements();
		this.pCssClass = new CssClassElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pColor = new ColorElements();
		this.pFontSize = new FontSizeElements();
		this.pValue = new ValueElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.adaptui.AdaptUI.BOOL");
		this.pEntity = new EntityElements();
		this.pProperty = new PropertyElements();
		this.pProvider = new ProviderElements();
		this.pDefTypes = new DefTypesElements();
		this.pDefType = new DefTypeElements();
		this.pEnums = new EnumsElements();
		this.pEnum = new EnumElements();
		this.pTYPE = new TYPEElements();
		this.pUpdateType = new UpdateTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.adaptui.AdaptUI".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	contextModel=ContextModel
	//	adaptationModel=AdaptationModel;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ContextModel:
	//	'ContextModel{'
	//	entity+=Entity+ ('Providers{' (provider+=Provider ';')*
	//	'};')? ('DefTypes{'
	//	types=DefTypes
	//	'};')?
	//	'};';
	public ContextModelElements getContextModelAccess() {
		return pContextModel;
	}
	
	public ParserRule getContextModelRule() {
		return getContextModelAccess().getRule();
	}
	
	//AdaptationModel:
	//	'AdaptationModel{'
	//	services=Services?
	//	'flow' flowName=STRING '{'
	//	adaptationRules+=AdaptationRule+
	//	'};'
	//	'};';
	public AdaptationModelElements getAdaptationModelAccess() {
		return pAdaptationModel;
	}
	
	public ParserRule getAdaptationModelRule() {
		return getAdaptationModelAccess().getRule();
	}
	
	//Services ServiceList:
	//	this=Service next=Services?;
	public ServicesElements getServicesAccess() {
		return pServices;
	}
	
	public ParserRule getServicesRule() {
		return getServicesAccess().getRule();
	}
	
	//Service:
	//	'service' type=ID 'from' loc=STRING 'as' id=STRING '{'
	//	functions=Functions
	//	'};';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Functions FunctionList:
	//	this=Function next=Functions?;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	//Function:
	//	'function' name=ID 'as' id=STRING ';';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//AdaptationRule:
	//	'rule' name=STRING '{'
	//	'LEVEL' level=INT ';'
	//	'FACT' factType=ID factName=FactName ';'
	//	'IF' '(' expr=ConditionalOR ')'
	//	'THEN' '('
	//	actionCollection=Actions
	//	')' ';' '}';
	public AdaptationRuleElements getAdaptationRuleAccess() {
		return pAdaptationRule;
	}
	
	public ParserRule getAdaptationRuleRule() {
		return getAdaptationRuleAccess().getRule();
	}
	
	//ConditionalOR ConditionalOrExpression:
	//	left=ConditionalAND ('||' right=ConditionalOR)?;
	public ConditionalORElements getConditionalORAccess() {
		return pConditionalOR;
	}
	
	public ParserRule getConditionalORRule() {
		return getConditionalORAccess().getRule();
	}
	
	//ConditionalAND ConditionalAndExpression:
	//	left=ConditionalPrimary ('&&' right=ConditionalAND)?;
	public ConditionalANDElements getConditionalANDAccess() {
		return pConditionalAND;
	}
	
	public ParserRule getConditionalANDRule() {
		return getConditionalANDAccess().getRule();
	}
	
	//ConditionalPrimary:
	//	cond=StringCondition
	//	| cond=NumberCondition
	//	| cond=BooleanCondition;
	public ConditionalPrimaryElements getConditionalPrimaryAccess() {
		return pConditionalPrimary;
	}
	
	public ParserRule getConditionalPrimaryRule() {
		return getConditionalPrimaryAccess().getRule();
	}
	
	//BooleanCondition:
	//	fact=Fact op=BoolOperators val=BOOL | fact=Fact;
	public BooleanConditionElements getBooleanConditionAccess() {
		return pBooleanCondition;
	}
	
	public ParserRule getBooleanConditionRule() {
		return getBooleanConditionAccess().getRule();
	}
	
	//NumberCondition:
	//	fact=Fact op=NumberOperators val=INT;
	public NumberConditionElements getNumberConditionAccess() {
		return pNumberCondition;
	}
	
	public ParserRule getNumberConditionRule() {
		return getNumberConditionAccess().getRule();
	}
	
	//StringCondition:
	//	fact=Fact op=StringOperators val=STRING;
	public StringConditionElements getStringConditionAccess() {
		return pStringCondition;
	}
	
	public ParserRule getStringConditionRule() {
		return getStringConditionAccess().getRule();
	}
	
	//Fact:
	//	factName=[FactName] '.get' entity=[Entity] '()' '.get' propertyName=ID '()';
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}
	
	//FactName:
	//	name=ID;
	public FactNameElements getFactNameAccess() {
		return pFactName;
	}
	
	public ParserRule getFactNameRule() {
		return getFactNameAccess().getRule();
	}
	
	//FactProperty:
	//	factName=[FactName] '.get' entity=[Entity] '()' '.set' propertyName=ID '(' value=Value ')';
	public FactPropertyElements getFactPropertyAccess() {
		return pFactProperty;
	}
	
	public ParserRule getFactPropertyRule() {
		return getFactPropertyAccess().getRule();
	}
	
	//NumberOperators:
	//	'>' | '<' | '==' | '!=' | '>=' | '<=' | '===';
	public NumberOperatorsElements getNumberOperatorsAccess() {
		return pNumberOperators;
	}
	
	public ParserRule getNumberOperatorsRule() {
		return getNumberOperatorsAccess().getRule();
	}
	
	//StringOperators:
	//	'==' | '!=' | '===';
	public StringOperatorsElements getStringOperatorsAccess() {
		return pStringOperators;
	}
	
	public ParserRule getStringOperatorsRule() {
		return getStringOperatorsAccess().getRule();
	}
	
	//BoolOperators:
	//	'==' | '!=';
	public BoolOperatorsElements getBoolOperatorsAccess() {
		return pBoolOperators;
	}
	
	public ParserRule getBoolOperatorsRule() {
		return getBoolOperatorsAccess().getRule();
	}
	
	//Actions:
	//	action=Action next=Actions?;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Action ActionCategory:
	//	actionCategory=ServiceOperation | actionCategory=TaskChangeOperation | actionCategory=NavigationChangeOperation |
	//	actionCategory=LayoutChangeOperation;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ServiceOperation ParentOperation:
	//	operation=ServiceFunctionCallOperation | operation=EditFactOperation | operation=SetDisplayPropertyOperation;
	public ServiceOperationElements getServiceOperationAccess() {
		return pServiceOperation;
	}
	
	public ParserRule getServiceOperationRule() {
		return getServiceOperationAccess().getRule();
	}
	
	//ServiceFunctionCallOperation:
	//	'functionCall' '(' service=ID ',' function=ID ',' val=Value ')' ';';
	public ServiceFunctionCallOperationElements getServiceFunctionCallOperationAccess() {
		return pServiceFunctionCallOperation;
	}
	
	public ParserRule getServiceFunctionCallOperationRule() {
		return getServiceFunctionCallOperationAccess().getRule();
	}
	
	//EditFactOperation: // set FactProperty to Value
	//	'editFact' '(' prop=FactProperty (',' val=Value)? ')' ';';
	public EditFactOperationElements getEditFactOperationAccess() {
		return pEditFactOperation;
	}
	
	public ParserRule getEditFactOperationRule() {
		return getEditFactOperationAccess().getRule();
	}
	
	//SetDisplayPropertyOperation:
	//	'setDisplayProperty' '(' property=STRING ',' propertyValue=DisplayPropertyValue ')' ';';
	public SetDisplayPropertyOperationElements getSetDisplayPropertyOperationAccess() {
		return pSetDisplayPropertyOperation;
	}
	
	public ParserRule getSetDisplayPropertyOperationRule() {
		return getSetDisplayPropertyOperationAccess().getRule();
	}
	
	//DisplayPropertyValue:
	//	propertyClass=IntValue | propertyClass=StringValue | propertyClass=BoolValue;
	public DisplayPropertyValueElements getDisplayPropertyValueAccess() {
		return pDisplayPropertyValue;
	}
	
	public ParserRule getDisplayPropertyValueRule() {
		return getDisplayPropertyValueAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=BOOL;
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//TaskChangeOperation ParentOperation:
	//	operation=AddViewComponentOperation | operation=DeleteViewComponentOperation |
	//	operation=AddViewComponentButtonOperation | operation=DeleteViewComponentButtonOperation;
	public TaskChangeOperationElements getTaskChangeOperationAccess() {
		return pTaskChangeOperation;
	}
	
	public ParserRule getTaskChangeOperationRule() {
		return getTaskChangeOperationAccess().getRule();
	}
	
	//AddViewComponentOperation:
	//	'addViewComponent' '(' viewComp=ViewComponent ',' target=TargetContainer ')' ';';
	public AddViewComponentOperationElements getAddViewComponentOperationAccess() {
		return pAddViewComponentOperation;
	}
	
	public ParserRule getAddViewComponentOperationRule() {
		return getAddViewComponentOperationAccess().getRule();
	}
	
	//DeleteViewComponentOperation:
	//	'deleteViewComponent' '(' viewComp=ViewComponent ')' ';';
	public DeleteViewComponentOperationElements getDeleteViewComponentOperationAccess() {
		return pDeleteViewComponentOperation;
	}
	
	public ParserRule getDeleteViewComponentOperationRule() {
		return getDeleteViewComponentOperationAccess().getRule();
	}
	
	//AddViewComponentButtonOperation:
	//	'addViewComponentButton' '(' id=STRING ',' langKey=STRING ',' action=STRING ')' ';';
	public AddViewComponentButtonOperationElements getAddViewComponentButtonOperationAccess() {
		return pAddViewComponentButtonOperation;
	}
	
	public ParserRule getAddViewComponentButtonOperationRule() {
		return getAddViewComponentButtonOperationAccess().getRule();
	}
	
	//DeleteViewComponentButtonOperation:
	//	'deleteViewComponentButton' '(' id=STRING ')' ';';
	public DeleteViewComponentButtonOperationElements getDeleteViewComponentButtonOperationAccess() {
		return pDeleteViewComponentButtonOperation;
	}
	
	public ParserRule getDeleteViewComponentButtonOperationRule() {
		return getDeleteViewComponentButtonOperationAccess().getRule();
	}
	
	//ViewComponent:
	//	ID;
	public ViewComponentElements getViewComponentAccess() {
		return pViewComponent;
	}
	
	public ParserRule getViewComponentRule() {
		return getViewComponentAccess().getRule();
	}
	
	//TargetContainer:
	//	ID;
	public TargetContainerElements getTargetContainerAccess() {
		return pTargetContainer;
	}
	
	public ParserRule getTargetContainerRule() {
		return getTargetContainerAccess().getRule();
	}
	
	//NavigationChangeOperation ParentOperation:
	//	operation=AddNavLinkOperation | operation=DeleteNavLinkOperation | operation=RedirectNavLinkOperation |
	//	operation=ClearNavOperation;
	public NavigationChangeOperationElements getNavigationChangeOperationAccess() {
		return pNavigationChangeOperation;
	}
	
	public ParserRule getNavigationChangeOperationRule() {
		return getNavigationChangeOperationAccess().getRule();
	}
	
	//AddNavLinkOperation: // add a navigation link to <ViewComponent> with link description <Text>
	//	'addNavLink' '(' viewComp=ViewComponent ',' text=Text ')' ';';
	public AddNavLinkOperationElements getAddNavLinkOperationAccess() {
		return pAddNavLinkOperation;
	}
	
	public ParserRule getAddNavLinkOperationRule() {
		return getAddNavLinkOperationAccess().getRule();
	}
	
	//DeleteNavLinkOperation: // delete link to <ViewComponent> from navigation
	//	'deleteNavLink' '(' viewComp=ViewComponent ')' ';';
	public DeleteNavLinkOperationElements getDeleteNavLinkOperationAccess() {
		return pDeleteNavLinkOperation;
	}
	
	public ParserRule getDeleteNavLinkOperationRule() {
		return getDeleteNavLinkOperationAccess().getRule();
	}
	
	//RedirectNavLinkOperation: // redirect to <ViewComponent>
	//	'redirectNavLink' '(' viewComp=ViewComponent ')' ';';
	public RedirectNavLinkOperationElements getRedirectNavLinkOperationAccess() {
		return pRedirectNavLinkOperation;
	}
	
	public ParserRule getRedirectNavLinkOperationRule() {
		return getRedirectNavLinkOperationAccess().getRule();
	}
	
	//ClearNavOperation:
	//	{ClearNavOperation} 'clearNavigation' '()' ';';
	public ClearNavOperationElements getClearNavOperationAccess() {
		return pClearNavOperation;
	}
	
	public ParserRule getClearNavOperationRule() {
		return getClearNavOperationAccess().getRule();
	}
	
	//Text:
	//	STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//LayoutChangeOperation ParentOperation:
	//	operation=ChangeFontOperation | operation=ChangeFontSizeOperation | operation=ChangeTableCssClassOperation |
	//	operation=AdaptCssClassOperation | operation=ChangeColorSchemeOperation;
	public LayoutChangeOperationElements getLayoutChangeOperationAccess() {
		return pLayoutChangeOperation;
	}
	
	public ParserRule getLayoutChangeOperationRule() {
		return getLayoutChangeOperationAccess().getRule();
	}
	
	//ChangeFontSizeOperation: // Change primary and secondary font size
	//	'changeFontSize' '(' sizePrimary=FontSize ',' sizeSecondary=FontSize ')' ';';
	public ChangeFontSizeOperationElements getChangeFontSizeOperationAccess() {
		return pChangeFontSizeOperation;
	}
	
	public ParserRule getChangeFontSizeOperationRule() {
		return getChangeFontSizeOperationAccess().getRule();
	}
	
	//ChangeColorSchemeOperation: // define color schemes and attributes for color schemes
	//	'changeColorScheme' '(' colorPrimary=Color ',' colorSecondary=Color ')' ';';
	public ChangeColorSchemeOperationElements getChangeColorSchemeOperationAccess() {
		return pChangeColorSchemeOperation;
	}
	
	public ParserRule getChangeColorSchemeOperationRule() {
		return getChangeColorSchemeOperationAccess().getRule();
	}
	
	//ChangeFontOperation: // change to font <Text>
	//	'changeFont' '(' text=Text ')' ';';
	public ChangeFontOperationElements getChangeFontOperationAccess() {
		return pChangeFontOperation;
	}
	
	public ParserRule getChangeFontOperationRule() {
		return getChangeFontOperationAccess().getRule();
	}
	
	//ChangeTableCssClassOperation: // Define table css classes by <Text>
	//	'changeTableCss' '(' text=Text ')' ';';
	public ChangeTableCssClassOperationElements getChangeTableCssClassOperationAccess() {
		return pChangeTableCssClassOperation;
	}
	
	public ParserRule getChangeTableCssClassOperationRule() {
		return getChangeTableCssClassOperationAccess().getRule();
	}
	
	//AdaptCssClassOperation: // basically JQuery changes the attribute of the given css class to attribute value
	//	'adaptCssClass' '(' cssClass=CssClass ',' cssAttribute=Attribute ',' cssAttributeValue=AttributeValue ')' ';';
	public AdaptCssClassOperationElements getAdaptCssClassOperationAccess() {
		return pAdaptCssClassOperation;
	}
	
	public ParserRule getAdaptCssClassOperationRule() {
		return getAdaptCssClassOperationAccess().getRule();
	}
	
	//CssClass:
	//	STRING;
	public CssClassElements getCssClassAccess() {
		return pCssClass;
	}
	
	public ParserRule getCssClassRule() {
		return getCssClassAccess().getRule();
	}
	
	//Attribute:
	//	STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeValue:
	//	STRING;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//Color:
	//	STRING;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//FontSize:
	//	INT;
	public FontSizeElements getFontSizeAccess() {
		return pFontSize;
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}
	
	//Value:
	//	INT | STRING | BOOL;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal BOOL:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//Entity:
	//	'Entity' name=ID '{'
	//	property+=Property+
	//	'};';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Property:
	//	name=ID '{' 'type' type=TYPE ',' 'provider' provider=[Provider] ',' 'update' update=UpdateType '};';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Provider:
	//	name=ID;
	public ProviderElements getProviderAccess() {
		return pProvider;
	}
	
	public ParserRule getProviderRule() {
		return getProviderAccess().getRule();
	}
	
	//DefTypes:
	//	this=DefType
	//	next=DefTypes?;
	public DefTypesElements getDefTypesAccess() {
		return pDefTypes;
	}
	
	public ParserRule getDefTypesRule() {
		return getDefTypesAccess().getRule();
	}
	
	//DefType:
	//	name=ID ':' enums=Enums ';';
	public DefTypeElements getDefTypeAccess() {
		return pDefType;
	}
	
	public ParserRule getDefTypeRule() {
		return getDefTypeAccess().getRule();
	}
	
	//Enums:
	//	this=Enum (',' next=Enums)?;
	public EnumsElements getEnumsAccess() {
		return pEnums;
	}
	
	public ParserRule getEnumsRule() {
		return getEnumsAccess().getRule();
	}
	
	//Enum:
	//	name=STRING;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//TYPE:
	//	string='string' | number='number' | boolean='boolean' | deftype=[DefType];
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//UpdateType:
	//	event='eventTriggered' | slow='slow' | fast='fast';
	public UpdateTypeElements getUpdateTypeAccess() {
		return pUpdateType;
	}
	
	public ParserRule getUpdateTypeRule() {
		return getUpdateTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
