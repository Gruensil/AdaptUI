/*
 * generated by Xtext 2.12.0
 */
package org.xtext.adaptui.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.adaptui.adaptUI.ActionCategory;
import org.xtext.adaptui.adaptUI.Actions;
import org.xtext.adaptui.adaptUI.AdaptCssClassOperation;
import org.xtext.adaptui.adaptUI.AdaptUIPackage;
import org.xtext.adaptui.adaptUI.AdaptationModel;
import org.xtext.adaptui.adaptUI.AdaptationRule;
import org.xtext.adaptui.adaptUI.AddNavLinkOperation;
import org.xtext.adaptui.adaptUI.AddViewComponentButtonOperation;
import org.xtext.adaptui.adaptUI.AddViewComponentOperation;
import org.xtext.adaptui.adaptUI.BoolValue;
import org.xtext.adaptui.adaptUI.BooleanCondition;
import org.xtext.adaptui.adaptUI.ChangeColorSchemeOperation;
import org.xtext.adaptui.adaptUI.ChangeFontOperation;
import org.xtext.adaptui.adaptUI.ChangeFontSizeOperation;
import org.xtext.adaptui.adaptUI.ChangeTableCssClassOperation;
import org.xtext.adaptui.adaptUI.ClearNavOperation;
import org.xtext.adaptui.adaptUI.ConditionalAndExpression;
import org.xtext.adaptui.adaptUI.ConditionalOrExpression;
import org.xtext.adaptui.adaptUI.ConditionalPrimary;
import org.xtext.adaptui.adaptUI.ContextModel;
import org.xtext.adaptui.adaptUI.DefType;
import org.xtext.adaptui.adaptUI.DefTypes;
import org.xtext.adaptui.adaptUI.DeleteNavLinkOperation;
import org.xtext.adaptui.adaptUI.DeleteViewComponentButtonOperation;
import org.xtext.adaptui.adaptUI.DeleteViewComponentOperation;
import org.xtext.adaptui.adaptUI.DisplayPropertyValue;
import org.xtext.adaptui.adaptUI.EditFactOperation;
import org.xtext.adaptui.adaptUI.Entity;
import org.xtext.adaptui.adaptUI.Enums;
import org.xtext.adaptui.adaptUI.Fact;
import org.xtext.adaptui.adaptUI.FactName;
import org.xtext.adaptui.adaptUI.FactProperty;
import org.xtext.adaptui.adaptUI.Function;
import org.xtext.adaptui.adaptUI.FunctionList;
import org.xtext.adaptui.adaptUI.IntValue;
import org.xtext.adaptui.adaptUI.Model;
import org.xtext.adaptui.adaptUI.NumberCondition;
import org.xtext.adaptui.adaptUI.ParentOperation;
import org.xtext.adaptui.adaptUI.Property;
import org.xtext.adaptui.adaptUI.Provider;
import org.xtext.adaptui.adaptUI.RedirectNavLinkOperation;
import org.xtext.adaptui.adaptUI.Service;
import org.xtext.adaptui.adaptUI.ServiceFunctionCallOperation;
import org.xtext.adaptui.adaptUI.ServiceList;
import org.xtext.adaptui.adaptUI.SetDisplayPropertyOperation;
import org.xtext.adaptui.adaptUI.StringCondition;
import org.xtext.adaptui.adaptUI.StringValue;
import org.xtext.adaptui.adaptUI.TYPE;
import org.xtext.adaptui.adaptUI.UpdateType;
import org.xtext.adaptui.services.AdaptUIGrammarAccess;

@SuppressWarnings("all")
public class AdaptUISemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AdaptUIGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AdaptUIPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AdaptUIPackage.ACTION_CATEGORY:
				sequence_Action(context, (ActionCategory) semanticObject); 
				return; 
			case AdaptUIPackage.ACTIONS:
				sequence_Actions(context, (Actions) semanticObject); 
				return; 
			case AdaptUIPackage.ADAPT_CSS_CLASS_OPERATION:
				sequence_AdaptCssClassOperation(context, (AdaptCssClassOperation) semanticObject); 
				return; 
			case AdaptUIPackage.ADAPTATION_MODEL:
				sequence_AdaptationModel(context, (AdaptationModel) semanticObject); 
				return; 
			case AdaptUIPackage.ADAPTATION_RULE:
				sequence_AdaptationRule(context, (AdaptationRule) semanticObject); 
				return; 
			case AdaptUIPackage.ADD_NAV_LINK_OPERATION:
				sequence_AddNavLinkOperation(context, (AddNavLinkOperation) semanticObject); 
				return; 
			case AdaptUIPackage.ADD_VIEW_COMPONENT_BUTTON_OPERATION:
				sequence_AddViewComponentButtonOperation(context, (AddViewComponentButtonOperation) semanticObject); 
				return; 
			case AdaptUIPackage.ADD_VIEW_COMPONENT_OPERATION:
				sequence_AddViewComponentOperation(context, (AddViewComponentOperation) semanticObject); 
				return; 
			case AdaptUIPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case AdaptUIPackage.BOOLEAN_CONDITION:
				sequence_BooleanCondition(context, (BooleanCondition) semanticObject); 
				return; 
			case AdaptUIPackage.CHANGE_COLOR_SCHEME_OPERATION:
				sequence_ChangeColorSchemeOperation(context, (ChangeColorSchemeOperation) semanticObject); 
				return; 
			case AdaptUIPackage.CHANGE_FONT_OPERATION:
				sequence_ChangeFontOperation(context, (ChangeFontOperation) semanticObject); 
				return; 
			case AdaptUIPackage.CHANGE_FONT_SIZE_OPERATION:
				sequence_ChangeFontSizeOperation(context, (ChangeFontSizeOperation) semanticObject); 
				return; 
			case AdaptUIPackage.CHANGE_TABLE_CSS_CLASS_OPERATION:
				sequence_ChangeTableCssClassOperation(context, (ChangeTableCssClassOperation) semanticObject); 
				return; 
			case AdaptUIPackage.CLEAR_NAV_OPERATION:
				sequence_ClearNavOperation(context, (ClearNavOperation) semanticObject); 
				return; 
			case AdaptUIPackage.CONDITIONAL_AND_EXPRESSION:
				sequence_ConditionalAND(context, (ConditionalAndExpression) semanticObject); 
				return; 
			case AdaptUIPackage.CONDITIONAL_OR_EXPRESSION:
				sequence_ConditionalOR(context, (ConditionalOrExpression) semanticObject); 
				return; 
			case AdaptUIPackage.CONDITIONAL_PRIMARY:
				sequence_ConditionalPrimary(context, (ConditionalPrimary) semanticObject); 
				return; 
			case AdaptUIPackage.CONTEXT_MODEL:
				sequence_ContextModel(context, (ContextModel) semanticObject); 
				return; 
			case AdaptUIPackage.DEF_TYPE:
				sequence_DefType(context, (DefType) semanticObject); 
				return; 
			case AdaptUIPackage.DEF_TYPES:
				sequence_DefTypes(context, (DefTypes) semanticObject); 
				return; 
			case AdaptUIPackage.DELETE_NAV_LINK_OPERATION:
				sequence_DeleteNavLinkOperation(context, (DeleteNavLinkOperation) semanticObject); 
				return; 
			case AdaptUIPackage.DELETE_VIEW_COMPONENT_BUTTON_OPERATION:
				sequence_DeleteViewComponentButtonOperation(context, (DeleteViewComponentButtonOperation) semanticObject); 
				return; 
			case AdaptUIPackage.DELETE_VIEW_COMPONENT_OPERATION:
				sequence_DeleteViewComponentOperation(context, (DeleteViewComponentOperation) semanticObject); 
				return; 
			case AdaptUIPackage.DISPLAY_PROPERTY_VALUE:
				sequence_DisplayPropertyValue(context, (DisplayPropertyValue) semanticObject); 
				return; 
			case AdaptUIPackage.EDIT_FACT_OPERATION:
				sequence_EditFactOperation(context, (EditFactOperation) semanticObject); 
				return; 
			case AdaptUIPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case AdaptUIPackage.ENUM:
				sequence_Enum(context, (org.xtext.adaptui.adaptUI.Enum) semanticObject); 
				return; 
			case AdaptUIPackage.ENUMS:
				sequence_Enums(context, (Enums) semanticObject); 
				return; 
			case AdaptUIPackage.FACT:
				sequence_Fact(context, (Fact) semanticObject); 
				return; 
			case AdaptUIPackage.FACT_NAME:
				sequence_FactName(context, (FactName) semanticObject); 
				return; 
			case AdaptUIPackage.FACT_PROPERTY:
				sequence_FactProperty(context, (FactProperty) semanticObject); 
				return; 
			case AdaptUIPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case AdaptUIPackage.FUNCTION_LIST:
				sequence_Functions(context, (FunctionList) semanticObject); 
				return; 
			case AdaptUIPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case AdaptUIPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AdaptUIPackage.NUMBER_CONDITION:
				sequence_NumberCondition(context, (NumberCondition) semanticObject); 
				return; 
			case AdaptUIPackage.PARENT_OPERATION:
				if (rule == grammarAccess.getLayoutChangeOperationRule()) {
					sequence_LayoutChangeOperation(context, (ParentOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNavigationChangeOperationRule()) {
					sequence_NavigationChangeOperation(context, (ParentOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getServiceOperationRule()) {
					sequence_ServiceOperation(context, (ParentOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTaskChangeOperationRule()) {
					sequence_TaskChangeOperation(context, (ParentOperation) semanticObject); 
					return; 
				}
				else break;
			case AdaptUIPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case AdaptUIPackage.PROVIDER:
				sequence_Provider(context, (Provider) semanticObject); 
				return; 
			case AdaptUIPackage.REDIRECT_NAV_LINK_OPERATION:
				sequence_RedirectNavLinkOperation(context, (RedirectNavLinkOperation) semanticObject); 
				return; 
			case AdaptUIPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case AdaptUIPackage.SERVICE_FUNCTION_CALL_OPERATION:
				sequence_ServiceFunctionCallOperation(context, (ServiceFunctionCallOperation) semanticObject); 
				return; 
			case AdaptUIPackage.SERVICE_LIST:
				sequence_Services(context, (ServiceList) semanticObject); 
				return; 
			case AdaptUIPackage.SET_DISPLAY_PROPERTY_OPERATION:
				sequence_SetDisplayPropertyOperation(context, (SetDisplayPropertyOperation) semanticObject); 
				return; 
			case AdaptUIPackage.STRING_CONDITION:
				sequence_StringCondition(context, (StringCondition) semanticObject); 
				return; 
			case AdaptUIPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case AdaptUIPackage.TYPE:
				sequence_TYPE(context, (TYPE) semanticObject); 
				return; 
			case AdaptUIPackage.UPDATE_TYPE:
				sequence_UpdateType(context, (UpdateType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns ActionCategory
	 *
	 * Constraint:
	 *     (
	 *         actionCategory=ServiceOperation | 
	 *         actionCategory=TaskChangeOperation | 
	 *         actionCategory=NavigationChangeOperation | 
	 *         actionCategory=LayoutChangeOperation
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, ActionCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns Actions
	 *
	 * Constraint:
	 *     (action=Action next=Actions?)
	 */
	protected void sequence_Actions(ISerializationContext context, Actions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AdaptCssClassOperation returns AdaptCssClassOperation
	 *
	 * Constraint:
	 *     (cssClass=CssClass cssAttribute=Attribute cssAttributeValue=AttributeValue)
	 */
	protected void sequence_AdaptCssClassOperation(ISerializationContext context, AdaptCssClassOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_CLASS));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_ATTRIBUTE_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPT_CSS_CLASS_OPERATION__CSS_ATTRIBUTE_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdaptCssClassOperationAccess().getCssClassCssClassParserRuleCall_2_0(), semanticObject.getCssClass());
		feeder.accept(grammarAccess.getAdaptCssClassOperationAccess().getCssAttributeAttributeParserRuleCall_4_0(), semanticObject.getCssAttribute());
		feeder.accept(grammarAccess.getAdaptCssClassOperationAccess().getCssAttributeValueAttributeValueParserRuleCall_6_0(), semanticObject.getCssAttributeValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AdaptationModel returns AdaptationModel
	 *
	 * Constraint:
	 *     (services=Services? flowName=STRING adaptationRules+=AdaptationRule+)
	 */
	protected void sequence_AdaptationModel(ISerializationContext context, AdaptationModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AdaptationRule returns AdaptationRule
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         level=INT 
	 *         factType=ID 
	 *         factName=FactName 
	 *         expr=ConditionalOR 
	 *         actionCollection=Actions
	 *     )
	 */
	protected void sequence_AdaptationRule(ISerializationContext context, AdaptationRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__LEVEL));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__FACT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__FACT_TYPE));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__FACT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__FACT_NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__EXPR));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__ACTION_COLLECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADAPTATION_RULE__ACTION_COLLECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getLevelINTTerminalRuleCall_4_0(), semanticObject.getLevel());
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getFactTypeIDTerminalRuleCall_7_0(), semanticObject.getFactType());
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getFactNameFactNameParserRuleCall_8_0(), semanticObject.getFactName());
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getExprConditionalORParserRuleCall_12_0(), semanticObject.getExpr());
		feeder.accept(grammarAccess.getAdaptationRuleAccess().getActionCollectionActionsParserRuleCall_16_0(), semanticObject.getActionCollection());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AddNavLinkOperation returns AddNavLinkOperation
	 *
	 * Constraint:
	 *     (viewComp=ViewComponent text=Text)
	 */
	protected void sequence_AddNavLinkOperation(ISerializationContext context, AddNavLinkOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_NAV_LINK_OPERATION__VIEW_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_NAV_LINK_OPERATION__VIEW_COMP));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_NAV_LINK_OPERATION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_NAV_LINK_OPERATION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddNavLinkOperationAccess().getViewCompViewComponentParserRuleCall_2_0(), semanticObject.getViewComp());
		feeder.accept(grammarAccess.getAddNavLinkOperationAccess().getTextTextParserRuleCall_4_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AddViewComponentButtonOperation returns AddViewComponentButtonOperation
	 *
	 * Constraint:
	 *     (id=STRING langKey=STRING action=STRING)
	 */
	protected void sequence_AddViewComponentButtonOperation(ISerializationContext context, AddViewComponentButtonOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__ID));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__LANG_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__LANG_KEY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_BUTTON_OPERATION__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddViewComponentButtonOperationAccess().getIdSTRINGTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getAddViewComponentButtonOperationAccess().getLangKeySTRINGTerminalRuleCall_4_0(), semanticObject.getLangKey());
		feeder.accept(grammarAccess.getAddViewComponentButtonOperationAccess().getActionSTRINGTerminalRuleCall_6_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AddViewComponentOperation returns AddViewComponentOperation
	 *
	 * Constraint:
	 *     (viewComp=ViewComponent target=TargetContainer)
	 */
	protected void sequence_AddViewComponentOperation(ISerializationContext context, AddViewComponentOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_OPERATION__VIEW_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_OPERATION__VIEW_COMP));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ADD_VIEW_COMPONENT_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddViewComponentOperationAccess().getViewCompViewComponentParserRuleCall_2_0(), semanticObject.getViewComp());
		feeder.accept(grammarAccess.getAddViewComponentOperationAccess().getTargetTargetContainerParserRuleCall_4_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoolValue returns BoolValue
	 *
	 * Constraint:
	 *     value=BOOL
	 */
	protected void sequence_BoolValue(ISerializationContext context, BoolValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.BOOL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.BOOL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolValueAccess().getValueBOOLTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BooleanCondition returns BooleanCondition
	 *
	 * Constraint:
	 *     ((fact=Fact op=BoolOperators val=BOOL) | fact=Fact)
	 */
	protected void sequence_BooleanCondition(ISerializationContext context, BooleanCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeColorSchemeOperation returns ChangeColorSchemeOperation
	 *
	 * Constraint:
	 *     (colorPrimary=Color colorSecondary=Color)
	 */
	protected void sequence_ChangeColorSchemeOperation(ISerializationContext context, ChangeColorSchemeOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_COLOR_SCHEME_OPERATION__COLOR_PRIMARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_COLOR_SCHEME_OPERATION__COLOR_PRIMARY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_COLOR_SCHEME_OPERATION__COLOR_SECONDARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_COLOR_SCHEME_OPERATION__COLOR_SECONDARY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeColorSchemeOperationAccess().getColorPrimaryColorParserRuleCall_2_0(), semanticObject.getColorPrimary());
		feeder.accept(grammarAccess.getChangeColorSchemeOperationAccess().getColorSecondaryColorParserRuleCall_4_0(), semanticObject.getColorSecondary());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeFontOperation returns ChangeFontOperation
	 *
	 * Constraint:
	 *     text=Text
	 */
	protected void sequence_ChangeFontOperation(ISerializationContext context, ChangeFontOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_OPERATION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_OPERATION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeFontOperationAccess().getTextTextParserRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeFontSizeOperation returns ChangeFontSizeOperation
	 *
	 * Constraint:
	 *     (sizePrimary=FontSize sizeSecondary=FontSize)
	 */
	protected void sequence_ChangeFontSizeOperation(ISerializationContext context, ChangeFontSizeOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_SIZE_OPERATION__SIZE_PRIMARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_SIZE_OPERATION__SIZE_PRIMARY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_SIZE_OPERATION__SIZE_SECONDARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_FONT_SIZE_OPERATION__SIZE_SECONDARY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeFontSizeOperationAccess().getSizePrimaryFontSizeParserRuleCall_2_0(), semanticObject.getSizePrimary());
		feeder.accept(grammarAccess.getChangeFontSizeOperationAccess().getSizeSecondaryFontSizeParserRuleCall_4_0(), semanticObject.getSizeSecondary());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeTableCssClassOperation returns ChangeTableCssClassOperation
	 *
	 * Constraint:
	 *     text=Text
	 */
	protected void sequence_ChangeTableCssClassOperation(ISerializationContext context, ChangeTableCssClassOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.CHANGE_TABLE_CSS_CLASS_OPERATION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.CHANGE_TABLE_CSS_CLASS_OPERATION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeTableCssClassOperationAccess().getTextTextParserRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClearNavOperation returns ClearNavOperation
	 *
	 * Constraint:
	 *     {ClearNavOperation}
	 */
	protected void sequence_ClearNavOperation(ISerializationContext context, ClearNavOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionalAND returns ConditionalAndExpression
	 *
	 * Constraint:
	 *     (left=ConditionalPrimary right=ConditionalAND?)
	 */
	protected void sequence_ConditionalAND(ISerializationContext context, ConditionalAndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionalOR returns ConditionalOrExpression
	 *
	 * Constraint:
	 *     (left=ConditionalAND right=ConditionalOR?)
	 */
	protected void sequence_ConditionalOR(ISerializationContext context, ConditionalOrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionalPrimary returns ConditionalPrimary
	 *
	 * Constraint:
	 *     (cond=StringCondition | cond=NumberCondition | cond=BooleanCondition)
	 */
	protected void sequence_ConditionalPrimary(ISerializationContext context, ConditionalPrimary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextModel returns ContextModel
	 *
	 * Constraint:
	 *     (entity+=Entity+ provider+=Provider* types=DefTypes?)
	 */
	protected void sequence_ContextModel(ISerializationContext context, ContextModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefType returns DefType
	 *
	 * Constraint:
	 *     (name=ID enums=Enums)
	 */
	protected void sequence_DefType(ISerializationContext context, DefType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.DEF_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.DEF_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.DEF_TYPE__ENUMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.DEF_TYPE__ENUMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefTypeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDefTypeAccess().getEnumsEnumsParserRuleCall_2_0(), semanticObject.getEnums());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefTypes returns DefTypes
	 *
	 * Constraint:
	 *     (this=DefType next=DefTypes?)
	 */
	protected void sequence_DefTypes(ISerializationContext context, DefTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeleteNavLinkOperation returns DeleteNavLinkOperation
	 *
	 * Constraint:
	 *     viewComp=ViewComponent
	 */
	protected void sequence_DeleteNavLinkOperation(ISerializationContext context, DeleteNavLinkOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.DELETE_NAV_LINK_OPERATION__VIEW_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.DELETE_NAV_LINK_OPERATION__VIEW_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteNavLinkOperationAccess().getViewCompViewComponentParserRuleCall_2_0(), semanticObject.getViewComp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeleteViewComponentButtonOperation returns DeleteViewComponentButtonOperation
	 *
	 * Constraint:
	 *     id=STRING
	 */
	protected void sequence_DeleteViewComponentButtonOperation(ISerializationContext context, DeleteViewComponentButtonOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.DELETE_VIEW_COMPONENT_BUTTON_OPERATION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.DELETE_VIEW_COMPONENT_BUTTON_OPERATION__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteViewComponentButtonOperationAccess().getIdSTRINGTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeleteViewComponentOperation returns DeleteViewComponentOperation
	 *
	 * Constraint:
	 *     viewComp=ViewComponent
	 */
	protected void sequence_DeleteViewComponentOperation(ISerializationContext context, DeleteViewComponentOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.DELETE_VIEW_COMPONENT_OPERATION__VIEW_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.DELETE_VIEW_COMPONENT_OPERATION__VIEW_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteViewComponentOperationAccess().getViewCompViewComponentParserRuleCall_2_0(), semanticObject.getViewComp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DisplayPropertyValue returns DisplayPropertyValue
	 *
	 * Constraint:
	 *     (propertyClass=IntValue | propertyClass=StringValue | propertyClass=BoolValue)
	 */
	protected void sequence_DisplayPropertyValue(ISerializationContext context, DisplayPropertyValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EditFactOperation returns EditFactOperation
	 *
	 * Constraint:
	 *     (prop=FactProperty val=Value?)
	 */
	protected void sequence_EditFactOperation(ISerializationContext context, EditFactOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID property+=Property+)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enum returns Enum
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Enum(ISerializationContext context, org.xtext.adaptui.adaptUI.Enum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.ENUM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.ENUM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Enums returns Enums
	 *
	 * Constraint:
	 *     (this=Enum next=Enums?)
	 */
	protected void sequence_Enums(ISerializationContext context, Enums semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FactName returns FactName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FactName(ISerializationContext context, FactName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FactProperty returns FactProperty
	 *
	 * Constraint:
	 *     (factName=[FactName|ID] entity=[Entity|ID] propertyName=ID value=Value)
	 */
	protected void sequence_FactProperty(ISerializationContext context, FactProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__FACT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__FACT_NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__ENTITY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__PROPERTY_NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT_PROPERTY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactPropertyAccess().getFactNameFactNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(AdaptUIPackage.Literals.FACT_PROPERTY__FACT_NAME, false));
		feeder.accept(grammarAccess.getFactPropertyAccess().getEntityEntityIDTerminalRuleCall_2_0_1(), semanticObject.eGet(AdaptUIPackage.Literals.FACT_PROPERTY__ENTITY, false));
		feeder.accept(grammarAccess.getFactPropertyAccess().getPropertyNameIDTerminalRuleCall_5_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getFactPropertyAccess().getValueValueParserRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fact returns Fact
	 *
	 * Constraint:
	 *     (factName=[FactName|ID] entity=[Entity|ID] propertyName=ID)
	 */
	protected void sequence_Fact(ISerializationContext context, Fact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT__FACT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT__FACT_NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT__ENTITY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FACT__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FACT__PROPERTY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactAccess().getFactNameFactNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(AdaptUIPackage.Literals.FACT__FACT_NAME, false));
		feeder.accept(grammarAccess.getFactAccess().getEntityEntityIDTerminalRuleCall_2_0_1(), semanticObject.eGet(AdaptUIPackage.Literals.FACT__ENTITY, false));
		feeder.accept(grammarAccess.getFactAccess().getPropertyNameIDTerminalRuleCall_5_0(), semanticObject.getPropertyName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID id=STRING)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.FUNCTION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.FUNCTION__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionAccess().getIdSTRINGTerminalRuleCall_3_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Functions returns FunctionList
	 *
	 * Constraint:
	 *     (this=Function next=Functions?)
	 */
	protected void sequence_Functions(ISerializationContext context, FunctionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LayoutChangeOperation returns ParentOperation
	 *
	 * Constraint:
	 *     (
	 *         operation=ChangeFontOperation | 
	 *         operation=ChangeFontSizeOperation | 
	 *         operation=ChangeTableCssClassOperation | 
	 *         operation=AdaptCssClassOperation | 
	 *         operation=ChangeColorSchemeOperation
	 *     )
	 */
	protected void sequence_LayoutChangeOperation(ISerializationContext context, ParentOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (contextModel=ContextModel adaptationModel=AdaptationModel)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.MODEL__CONTEXT_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.MODEL__CONTEXT_MODEL));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.MODEL__ADAPTATION_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.MODEL__ADAPTATION_MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getContextModelContextModelParserRuleCall_0_0(), semanticObject.getContextModel());
		feeder.accept(grammarAccess.getModelAccess().getAdaptationModelAdaptationModelParserRuleCall_1_0(), semanticObject.getAdaptationModel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NavigationChangeOperation returns ParentOperation
	 *
	 * Constraint:
	 *     (operation=AddNavLinkOperation | operation=DeleteNavLinkOperation | operation=RedirectNavLinkOperation | operation=ClearNavOperation)
	 */
	protected void sequence_NavigationChangeOperation(ISerializationContext context, ParentOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NumberCondition returns NumberCondition
	 *
	 * Constraint:
	 *     (fact=Fact op=NumberOperators val=INT)
	 */
	protected void sequence_NumberCondition(ISerializationContext context, NumberCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__FACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__FACT));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__OP));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.NUMBER_CONDITION__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberConditionAccess().getFactFactParserRuleCall_0_0(), semanticObject.getFact());
		feeder.accept(grammarAccess.getNumberConditionAccess().getOpNumberOperatorsParserRuleCall_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getNumberConditionAccess().getValINTTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=TYPE provider=[Provider|ID] update=UpdateType)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.PROPERTY__TYPE));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.PROPERTY__PROVIDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.PROPERTY__PROVIDER));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.PROPERTY__UPDATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.PROPERTY__UPDATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeTYPEParserRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPropertyAccess().getProviderProviderIDTerminalRuleCall_6_0_1(), semanticObject.eGet(AdaptUIPackage.Literals.PROPERTY__PROVIDER, false));
		feeder.accept(grammarAccess.getPropertyAccess().getUpdateUpdateTypeParserRuleCall_9_0(), semanticObject.getUpdate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Provider returns Provider
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Provider(ISerializationContext context, Provider semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.PROVIDER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.PROVIDER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProviderAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RedirectNavLinkOperation returns RedirectNavLinkOperation
	 *
	 * Constraint:
	 *     viewComp=ViewComponent
	 */
	protected void sequence_RedirectNavLinkOperation(ISerializationContext context, RedirectNavLinkOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.REDIRECT_NAV_LINK_OPERATION__VIEW_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.REDIRECT_NAV_LINK_OPERATION__VIEW_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedirectNavLinkOperationAccess().getViewCompViewComponentParserRuleCall_2_0(), semanticObject.getViewComp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ServiceFunctionCallOperation returns ServiceFunctionCallOperation
	 *
	 * Constraint:
	 *     (service=ID function=ID val=Value)
	 */
	protected void sequence_ServiceFunctionCallOperation(ISerializationContext context, ServiceFunctionCallOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__SERVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__SERVICE));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE_FUNCTION_CALL_OPERATION__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceFunctionCallOperationAccess().getServiceIDTerminalRuleCall_2_0(), semanticObject.getService());
		feeder.accept(grammarAccess.getServiceFunctionCallOperationAccess().getFunctionIDTerminalRuleCall_4_0(), semanticObject.getFunction());
		feeder.accept(grammarAccess.getServiceFunctionCallOperationAccess().getValValueParserRuleCall_6_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ServiceOperation returns ParentOperation
	 *
	 * Constraint:
	 *     (operation=ServiceFunctionCallOperation | operation=EditFactOperation | operation=SetDisplayPropertyOperation)
	 */
	protected void sequence_ServiceOperation(ISerializationContext context, ParentOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (type=ID loc=STRING id=STRING functions=Functions)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE__TYPE));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE__LOC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE__LOC));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE__ID));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SERVICE__FUNCTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SERVICE__FUNCTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceAccess().getTypeIDTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getServiceAccess().getLocSTRINGTerminalRuleCall_3_0(), semanticObject.getLoc());
		feeder.accept(grammarAccess.getServiceAccess().getIdSTRINGTerminalRuleCall_5_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getServiceAccess().getFunctionsFunctionsParserRuleCall_7_0(), semanticObject.getFunctions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Services returns ServiceList
	 *
	 * Constraint:
	 *     (this=Service next=Services?)
	 */
	protected void sequence_Services(ISerializationContext context, ServiceList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SetDisplayPropertyOperation returns SetDisplayPropertyOperation
	 *
	 * Constraint:
	 *     (property=STRING propertyValue=DisplayPropertyValue)
	 */
	protected void sequence_SetDisplayPropertyOperation(ISerializationContext context, SetDisplayPropertyOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SET_DISPLAY_PROPERTY_OPERATION__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SET_DISPLAY_PROPERTY_OPERATION__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.SET_DISPLAY_PROPERTY_OPERATION__PROPERTY_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.SET_DISPLAY_PROPERTY_OPERATION__PROPERTY_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetDisplayPropertyOperationAccess().getPropertySTRINGTerminalRuleCall_2_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getSetDisplayPropertyOperationAccess().getPropertyValueDisplayPropertyValueParserRuleCall_4_0(), semanticObject.getPropertyValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringCondition returns StringCondition
	 *
	 * Constraint:
	 *     (fact=Fact op=StringOperators val=STRING)
	 */
	protected void sequence_StringCondition(ISerializationContext context, StringCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__FACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__FACT));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__OP));
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.STRING_CONDITION__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringConditionAccess().getFactFactParserRuleCall_0_0(), semanticObject.getFact());
		feeder.accept(grammarAccess.getStringConditionAccess().getOpStringOperatorsParserRuleCall_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getStringConditionAccess().getValSTRINGTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptUIPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptUIPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TYPE returns TYPE
	 *
	 * Constraint:
	 *     (string='string' | number='number' | boolean='boolean' | deftype=[DefType|ID])
	 */
	protected void sequence_TYPE(ISerializationContext context, TYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskChangeOperation returns ParentOperation
	 *
	 * Constraint:
	 *     (
	 *         operation=AddViewComponentOperation | 
	 *         operation=DeleteViewComponentOperation | 
	 *         operation=AddViewComponentButtonOperation | 
	 *         operation=DeleteViewComponentButtonOperation
	 *     )
	 */
	protected void sequence_TaskChangeOperation(ISerializationContext context, ParentOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UpdateType returns UpdateType
	 *
	 * Constraint:
	 *     (event='eventTriggered' | slow='slow' | fast='fast')
	 */
	protected void sequence_UpdateType(ISerializationContext context, UpdateType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
