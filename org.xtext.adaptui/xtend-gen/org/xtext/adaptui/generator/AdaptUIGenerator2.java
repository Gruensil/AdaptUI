/**
 * generated by Xtext 2.10.0
 */
package org.xtext.adaptui.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.adaptui.adaptUI.ActionCategory;
import org.xtext.adaptui.adaptUI.Actions;
import org.xtext.adaptui.adaptUI.AdaptCssClassOperation;
import org.xtext.adaptui.adaptUI.AdaptationRule;
import org.xtext.adaptui.adaptUI.AddNavLinkOperation;
import org.xtext.adaptui.adaptUI.AddViewComponentOperation;
import org.xtext.adaptui.adaptUI.BoolValue;
import org.xtext.adaptui.adaptUI.BooleanCondition;
import org.xtext.adaptui.adaptUI.ChangeColorSchemeOperation;
import org.xtext.adaptui.adaptUI.ChangeFontOperation;
import org.xtext.adaptui.adaptUI.ChangeFontSizeOperation;
import org.xtext.adaptui.adaptUI.ChangeTableCssClassOperation;
import org.xtext.adaptui.adaptUI.ClearNavOperation;
import org.xtext.adaptui.adaptUI.ConditionalAndExpression;
import org.xtext.adaptui.adaptUI.ConditionalOrExpression;
import org.xtext.adaptui.adaptUI.ConditionalPrimary;
import org.xtext.adaptui.adaptUI.DefType;
import org.xtext.adaptui.adaptUI.DefTypes;
import org.xtext.adaptui.adaptUI.DeleteNavLinkOperation;
import org.xtext.adaptui.adaptUI.DeleteViewComponentOperation;
import org.xtext.adaptui.adaptUI.EditFactOperation;
import org.xtext.adaptui.adaptUI.Entity;
import org.xtext.adaptui.adaptUI.Enums;
import org.xtext.adaptui.adaptUI.Fact;
import org.xtext.adaptui.adaptUI.FactProperty;
import org.xtext.adaptui.adaptUI.Function;
import org.xtext.adaptui.adaptUI.FunctionList;
import org.xtext.adaptui.adaptUI.IntValue;
import org.xtext.adaptui.adaptUI.Model;
import org.xtext.adaptui.adaptUI.NumberCondition;
import org.xtext.adaptui.adaptUI.ParentOperation;
import org.xtext.adaptui.adaptUI.Property;
import org.xtext.adaptui.adaptUI.Provider;
import org.xtext.adaptui.adaptUI.RedirectNavLinkOperation;
import org.xtext.adaptui.adaptUI.Service;
import org.xtext.adaptui.adaptUI.ServiceFunctionCallOperation;
import org.xtext.adaptui.adaptUI.ServiceList;
import org.xtext.adaptui.adaptUI.SetDisplayPropertyOperation;
import org.xtext.adaptui.adaptUI.StringCondition;
import org.xtext.adaptui.adaptUI.StringValue;
import org.xtext.adaptui.adaptUI.TYPE;
import org.xtext.adaptui.adaptUI.UpdateType;
import org.xtext.adaptui.adaptUI.impl.AddNavLinkOperationImpl;

/**
 * Code is written here and then copied to AdaptUIGenerator.xtend without indentation
 */
@SuppressWarnings("all")
public class AdaptUIGenerator2 extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class);
    for (final Model e : _filter) {
      fsa.generateFile(
        ("adaptUI" + ".xml"), 
        this.compile(e));
    }
  }
  
  public CharSequence compile(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"ASCII\"?>");
    _builder.newLine();
    _builder.append("<adaptUIModel xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<contextModel>");
    _builder.newLine();
    {
      EList<Entity> _entity = model.getContextModel().getEntity();
      for(final Entity entity : _entity) {
        _builder.append("\t\t\t");
        CharSequence _compile = this.compile(entity);
        _builder.append(_compile, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Provider> _provider = model.getContextModel().getProvider();
      boolean _tripleNotEquals = (_provider != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t\t");
        _builder.append("<providers>");
        _builder.newLine();
        {
          EList<Provider> _provider_1 = model.getContextModel().getProvider();
          for(final Provider prov : _provider_1) {
            _builder.append("\t\t\t");
            _builder.append("\t");
            CharSequence _compile_1 = this.compile(prov);
            _builder.append(_compile_1, "\t\t\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("</providers>");
        _builder.newLine();
      }
    }
    {
      DefTypes _types = model.getContextModel().getTypes();
      boolean _tripleNotEquals_1 = (_types != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t\t\t");
        _builder.append("<defTypes>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        CharSequence _compile_2 = this.compile(model.getContextModel().getTypes());
        _builder.append(_compile_2, "\t\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("</defTypes>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</contextModel>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<adaptationModel>\t\t");
    _builder.newLine();
    {
      ServiceList _services = model.getAdaptationModel().getServices();
      boolean _tripleNotEquals_2 = (_services != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t\t");
        _builder.append("<services>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        CharSequence _compile_3 = this.compile(model.getAdaptationModel().getServices());
        _builder.append(_compile_3, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</services>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("<flow name=\"");
    String _flowName = model.getAdaptationModel().getFlowName();
    _builder.append(_flowName, "\t\t");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<AdaptationRule> _adaptationRules = model.getAdaptationModel().getAdaptationRules();
      for(final AdaptationRule rule : _adaptationRules) {
        _builder.append("\t\t\t");
        CharSequence _compile_4 = this.compile(rule);
        _builder.append(_compile_4, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("</flow>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</adaptationModel>");
    _builder.newLine();
    _builder.append("</adaptUIModel>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<entity name=\"");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<Property> _property = entity.getProperty();
      for(final Property prop : _property) {
        _builder.append("\t");
        CharSequence _compile = this.compile(prop);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</entity>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Property prop) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"");
    String _name = prop.getName();
    _builder.append(_name);
    _builder.append("\" type=\"");
    String _type = this.getType(prop.getType());
    _builder.append(_type);
    _builder.append("\" provider=\"");
    String _name_1 = prop.getProvider().getName();
    _builder.append(_name_1);
    _builder.append("\" update=\"");
    String _updateType = this.getUpdateType(prop.getUpdate());
    _builder.append(_updateType);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String getType(final TYPE type) {
    String _string = type.getString();
    boolean _tripleNotEquals = (_string != null);
    if (_tripleNotEquals) {
      return type.getString();
    } else {
      String _number = type.getNumber();
      boolean _tripleNotEquals_1 = (_number != null);
      if (_tripleNotEquals_1) {
        return type.getNumber();
      } else {
        String _boolean = type.getBoolean();
        boolean _tripleNotEquals_2 = (_boolean != null);
        if (_tripleNotEquals_2) {
          return type.getBoolean();
        } else {
          return type.getDeftype().getName();
        }
      }
    }
  }
  
  public String getUpdateType(final UpdateType update) {
    String _event = update.getEvent();
    boolean _tripleNotEquals = (_event != null);
    if (_tripleNotEquals) {
      return update.getEvent();
    } else {
      String _slow = update.getSlow();
      boolean _tripleNotEquals_1 = (_slow != null);
      if (_tripleNotEquals_1) {
        return update.getSlow();
      } else {
        return update.getFast();
      }
    }
  }
  
  public CharSequence compile(final Provider prov) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<provider name=\"");
    String _name = prov.getName();
    _builder.append(_name);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final DefTypes dtypes) {
    StringConcatenation _builder = new StringConcatenation();
    {
      DefType _this = dtypes.getThis();
      boolean _tripleNotEquals = (_this != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(dtypes.getThis());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      DefTypes _next = dtypes.getNext();
      boolean _tripleNotEquals_1 = (_next != null);
      if (_tripleNotEquals_1) {
        Object _compile_1 = this.compile(dtypes.getNext());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final DefType dtype) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<defType name=\"");
    String _name = dtype.getName();
    _builder.append(_name);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      Enums _enums = dtype.getEnums();
      boolean _tripleNotEquals = (_enums != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        CharSequence _compile = this.compile(dtype.getEnums());
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</defType>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Enums enus) {
    StringConcatenation _builder = new StringConcatenation();
    {
      org.xtext.adaptui.adaptUI.Enum _this = enus.getThis();
      boolean _tripleNotEquals = (_this != null);
      if (_tripleNotEquals) {
        _builder.append("<enum name=\"");
        String _name = enus.getThis().getName();
        _builder.append(_name);
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Enums _next = enus.getNext();
      boolean _tripleNotEquals_1 = (_next != null);
      if (_tripleNotEquals_1) {
        Object _compile = this.compile(enus.getNext());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ServiceList slist) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Service _this = slist.getThis();
      boolean _tripleNotEquals = (_this != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(slist.getThis());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ServiceList _next = slist.getNext();
      boolean _tripleNotEquals_1 = (_next != null);
      if (_tripleNotEquals_1) {
        Object _compile_1 = this.compile(slist.getNext());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Service svc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<service id=\"");
    String _id = svc.getId();
    _builder.append(_id);
    _builder.append("\" type=\"");
    String _type = svc.getType();
    _builder.append(_type);
    _builder.append("\" location=\"");
    String _loc = svc.getLoc();
    _builder.append(_loc);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _compile = this.compile(svc.getFunctions());
    _builder.append(_compile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("</service>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final FunctionList flist) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Function _this = flist.getThis();
      boolean _tripleNotEquals = (_this != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(flist.getThis());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      FunctionList _next = flist.getNext();
      boolean _tripleNotEquals_1 = (_next != null);
      if (_tripleNotEquals_1) {
        Object _compile_1 = this.compile(flist.getNext());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function func) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<function id=\"");
    String _id = func.getId();
    _builder.append(_id);
    _builder.append("\" name=\"");
    String _name = func.getName();
    _builder.append(_name);
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final AdaptationRule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<adaptationRule name=\"");
    String _name = rule.getName();
    _builder.append(_name);
    _builder.append("\" priority=\"");
    int _level = rule.getLevel();
    _builder.append(_level);
    _builder.append("\" factType=\"");
    String _factType = rule.getFactType();
    _builder.append(_factType);
    _builder.append("\" factName=\"");
    String _name_1 = rule.getFactName().getName();
    _builder.append(_name_1);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<conditions>");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compile = this.compile(rule.getExpr());
    _builder.append(_compile, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</conditions>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<actions>");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compile_1 = this.compile(rule.getActionCollection());
    _builder.append(_compile_1, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</actions>");
    _builder.newLine();
    _builder.append("</adaptationRule>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Actions act) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(act.getAction());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    {
      Actions _next = act.getNext();
      boolean _tripleNotEquals = (_next != null);
      if (_tripleNotEquals) {
        Object _compile_1 = this.compile(act.getNext());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ActionCategory cat) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(cat.getActionCategory());
    _builder.append(_compile);
    return _builder;
  }
  
  public CharSequence compile(final ParentOperation pop) {
    CharSequence _xblockexpression = null;
    {
      EObject op = pop.getOperation();
      CharSequence _switchResult = null;
      boolean _matched = false;
      if (op instanceof ServiceFunctionCallOperation) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<functionCall service=\"");
        String _service = ((ServiceFunctionCallOperation) op).getService();
        _builder.append(_service);
        _builder.append("\" function=\"");
        String _function = ((ServiceFunctionCallOperation) op).getFunction();
        _builder.append(_function);
        _builder.append("\" value=");
        String _val = ((ServiceFunctionCallOperation) op).getVal();
        _builder.append(_val);
        _builder.append("/>");
        _switchResult = _builder;
      }
      if (!_matched) {
        if (op instanceof EditFactOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<editFactOperation set=\"");
          CharSequence _compile = this.compile(((EditFactOperation) op).getProp());
          _builder.append(_compile);
          _builder.append("\" ");
          {
            String _val = ((EditFactOperation) op).getVal();
            boolean _tripleNotEquals = (_val != null);
            if (_tripleNotEquals) {
              _builder.append("value=\"");
              String _val_1 = ((EditFactOperation) op).getVal();
              _builder.append(_val_1);
              _builder.append("\"");
            }
          }
          _builder.append("/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof SetDisplayPropertyOperation) {
          _matched=true;
          CharSequence _switchResult_1 = null;
          EObject _propertyClass = ((SetDisplayPropertyOperation) op).getPropertyValue().getPropertyClass();
          boolean _matched_1 = false;
          if (_propertyClass instanceof StringValue) {
            _matched_1=true;
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("<setDisplayProperty property=\"");
            String _property = ((SetDisplayPropertyOperation) op).getProperty();
            _builder.append(_property);
            _builder.append("\" value=\"");
            EObject _propertyClass_1 = ((SetDisplayPropertyOperation) op).getPropertyValue().getPropertyClass();
            String _value = ((StringValue) _propertyClass_1).getValue();
            _builder.append(_value);
            _builder.append("\"/>");
            _switchResult_1 = _builder;
          }
          if (!_matched_1) {
            if (_propertyClass instanceof IntValue) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append("<setDisplayProperty property=\"");
              String _property = ((SetDisplayPropertyOperation) op).getProperty();
              _builder.append(_property);
              _builder.append("\" value=\"");
              EObject _propertyClass_1 = ((SetDisplayPropertyOperation) op).getPropertyValue().getPropertyClass();
              int _value = ((IntValue) _propertyClass_1).getValue();
              _builder.append(_value);
              _builder.append("\"/>");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            if (_propertyClass instanceof BoolValue) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append("<setDisplayProperty property=\"");
              String _property = ((SetDisplayPropertyOperation) op).getProperty();
              _builder.append(_property);
              _builder.append("\" value=\"");
              EObject _propertyClass_1 = ((SetDisplayPropertyOperation) op).getPropertyValue().getPropertyClass();
              String _value = ((BoolValue) _propertyClass_1).getValue();
              _builder.append(_value);
              _builder.append("\" type=\"boolean\"/>");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("<setDisplayProperty property=\"");
            String _property = ((SetDisplayPropertyOperation) op).getProperty();
            _builder.append(_property);
            _builder.append("\" value=\"");
            _builder.append(((SetDisplayPropertyOperation) op));
            _builder.append("\"/>");
            _switchResult_1 = _builder;
          }
          _switchResult = _switchResult_1;
        }
      }
      if (!_matched) {
        if (op instanceof AddViewComponentOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<addViewComponentOperation viewComponent=\"");
          String _viewComp = ((AddViewComponentOperation) op).getViewComp();
          _builder.append(_viewComp);
          _builder.append("\" target=\"");
          String _target = ((AddViewComponentOperation) op).getTarget();
          _builder.append(_target);
          _builder.append("\"/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof DeleteViewComponentOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<deleteViewComponentOperation viewComponent=\"");
          String _viewComp = ((DeleteViewComponentOperation) op).getViewComp();
          _builder.append(_viewComp);
          _builder.append("\"/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof AddNavLinkOperationImpl) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<addNavLinkOperation viewContainer=\"");
          String _viewComp = ((AddNavLinkOperation) op).getViewComp();
          _builder.append(_viewComp);
          _builder.append("\" langKey=");
          String _text = ((AddNavLinkOperation) op).getText();
          _builder.append(_text);
          _builder.append("/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof DeleteNavLinkOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<deleteNavLinkOperation viewContainer=\"");
          String _viewComp = ((DeleteNavLinkOperation) op).getViewComp();
          _builder.append(_viewComp);
          _builder.append("\" />");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof RedirectNavLinkOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<redirectNavLinkOperation viewContainer=\"");
          String _viewComp = ((RedirectNavLinkOperation) op).getViewComp();
          _builder.append(_viewComp);
          _builder.append("\" />");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof ClearNavOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<clearNavOperation/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof ChangeFontOperation) {
          _matched=true;
          _switchResult = null;
        }
      }
      if (!_matched) {
        if (op instanceof ChangeFontSizeOperation) {
          _matched=true;
          _switchResult = null;
        }
      }
      if (!_matched) {
        if (op instanceof ChangeTableCssClassOperation) {
          _matched=true;
          _switchResult = null;
        }
      }
      if (!_matched) {
        if (op instanceof AdaptCssClassOperation) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<editCssClassOperation cssClass=");
          String _cssClass = ((AdaptCssClassOperation) op).getCssClass();
          _builder.append(_cssClass);
          _builder.append(" cssAttribute=");
          String _cssAttribute = ((AdaptCssClassOperation) op).getCssAttribute();
          _builder.append(_cssAttribute);
          _builder.append(" value=");
          String _cssAttributeValue = ((AdaptCssClassOperation) op).getCssAttributeValue();
          _builder.append(_cssAttributeValue);
          _builder.append("/>");
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (op instanceof ChangeColorSchemeOperation) {
          _matched=true;
          _switchResult = null;
        }
      }
      if (!_matched) {
        CharSequence _xblockexpression_1 = null;
        {
          InputOutput.<String>println("ERROR: unknown operation");
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<!--ERROR: unknown operation-->");
          _xblockexpression_1 = _builder;
        }
        _switchResult = _xblockexpression_1;
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public CharSequence compile(final FactProperty factProp) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = factProp.getFactName().getName();
    _builder.append(_name);
    _builder.append(".get");
    String _name_1 = factProp.getEntity().getName();
    _builder.append(_name_1);
    _builder.append("().set");
    String _propertyName = factProp.getPropertyName();
    _builder.append(_propertyName);
    _builder.append("(");
    String _value = factProp.getValue();
    _builder.append(_value);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ConditionalOrExpression expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.newLine();
    {
      ConditionalAndExpression _left = expr.getLeft();
      boolean _tripleNotEquals = (_left != null);
      if (_tripleNotEquals) {
        {
          if (((expr.getLeft().getLeft() != null) && (expr.getLeft().getRight() != null))) {
            _builder.append("\t");
            _builder.append("<conditionGroup>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile = this.compile(expr.getLeft());
            _builder.append(_compile, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</conditionGroup>");
            _builder.newLine();
          }
        }
        {
          if (((expr.getLeft().getLeft() != null) && (expr.getLeft().getRight() == null))) {
            _builder.append("\t");
            CharSequence _compile_1 = this.compile(expr.getLeft().getLeft());
            _builder.append(_compile_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ConditionalOrExpression _right = expr.getRight();
      boolean _tripleNotEquals_1 = (_right != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        Object _compile_2 = this.compile(expr.getRight());
        _builder.append(_compile_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ConditionalAndExpression expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ConditionalPrimary _left = expr.getLeft();
      boolean _tripleNotEquals = (_left != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(expr.getLeft());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ConditionalAndExpression _right = expr.getRight();
      boolean _tripleNotEquals_1 = (_right != null);
      if (_tripleNotEquals_1) {
        Object _compile_1 = this.compile(expr.getRight());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ConditionalPrimary expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _cond = expr.getCond();
      if ((_cond instanceof BooleanCondition)) {
        EObject _cond_1 = expr.getCond();
        CharSequence _compile = this.compile(((BooleanCondition) _cond_1));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _cond_2 = expr.getCond();
      if ((_cond_2 instanceof NumberCondition)) {
        EObject _cond_3 = expr.getCond();
        CharSequence _compile_1 = this.compile(((NumberCondition) _cond_3));
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _cond_4 = expr.getCond();
      if ((_cond_4 instanceof StringCondition)) {
        EObject _cond_5 = expr.getCond();
        CharSequence _compile_2 = this.compile(((StringCondition) _cond_5));
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final BooleanCondition cond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<condition fact=\"");
    CharSequence _compile = this.compile(cond.getFact());
    _builder.append(_compile);
    _builder.append("\" ");
    {
      String _op = cond.getOp();
      boolean _tripleNotEquals = (_op != null);
      if (_tripleNotEquals) {
        _builder.append("operator=\"");
        String _operator = this.getOperator(cond.getOp());
        _builder.append(_operator);
        _builder.append("\"");
      }
    }
    _builder.append(" ");
    {
      String _val = cond.getVal();
      boolean _tripleNotEquals_1 = (_val != null);
      if (_tripleNotEquals_1) {
        _builder.append("value=\"");
        String _replace = cond.getVal().replace("\'", "");
        _builder.append(_replace);
        _builder.append("\"");
      }
    }
    _builder.append(" type=\"boolean\"/>");
    return _builder;
  }
  
  public CharSequence compile(final StringCondition cond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<condition fact=\"");
    CharSequence _compile = this.compile(cond.getFact());
    _builder.append(_compile);
    _builder.append("\" ");
    {
      String _op = cond.getOp();
      boolean _tripleNotEquals = (_op != null);
      if (_tripleNotEquals) {
        _builder.append("operator=\"");
        String _operator = this.getOperator(cond.getOp());
        _builder.append(_operator);
        _builder.append("\"");
      }
    }
    _builder.append(" ");
    {
      String _val = cond.getVal();
      boolean _tripleNotEquals_1 = (_val != null);
      if (_tripleNotEquals_1) {
        _builder.append("value=\"");
        String _replace = cond.getVal().replace("\'", "");
        _builder.append(_replace);
        _builder.append("\"");
      }
    }
    _builder.append(" type=\"string\"/>");
    return _builder;
  }
  
  public CharSequence compile(final NumberCondition cond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<condition fact=\"");
    CharSequence _compile = this.compile(cond.getFact());
    _builder.append(_compile);
    _builder.append("\" ");
    {
      String _op = cond.getOp();
      boolean _tripleNotEquals = (_op != null);
      if (_tripleNotEquals) {
        _builder.append("operator=\"");
        String _operator = this.getOperator(cond.getOp());
        _builder.append(_operator);
        _builder.append("\"");
      }
    }
    _builder.append(" value=\"");
    int _val = cond.getVal();
    _builder.append(_val);
    _builder.append("\" type=\"number\"/>");
    return _builder;
  }
  
  public CharSequence compile(final Fact fact) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = fact.getFactName().getName();
    _builder.append(_name);
    _builder.append(".get");
    String _name_1 = fact.getEntity().getName();
    _builder.append(_name_1);
    _builder.append("().get");
    String _propertyName = fact.getPropertyName();
    _builder.append(_propertyName);
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String getOperator(final String op) {
    if (op != null) {
      switch (op) {
        case "<=":
          return "lte";
        case ">=":
          return "gte";
        case "<":
          return "lt";
        case ">":
          return "gt";
        default:
          return op;
      }
    } else {
      return op;
    }
  }
}
